

     -  What is the distinction between early bindings and primops?

    Primops are compiler internal objects that are used for various purposes,
one of which is to represent procedures it knows how to generate code for.
Early bindings consist of information about the environment that the code
will be run in.  This includes integrable procedures (and macros?).

     -  What information is contained in each?

    Whatever is appropriate.  Machine specific information should be in the
primops.  The primops should be kept as simple as possible.

     -  Shouldn't early bindings contain typing information and not
        primops?

    Everything that can be early bound instead of into a primop should be.
Some type information has to be in the primops since some are type specific
or depend on type information to know haw to generate code (such as +).
        
     -  Shouldn't setter and other method information, if any, be
        declared in the early binding?

    Yes.

     -  How is instruction selection and register usage information
        organized in primops? (early bindings?)

    Not my department.
        
     -  What information is needed about primops or early bindings
        in the parts of the compiler that preceed register allocation
        and code generation?  Can this information be provided by
        early bindings alone? If so, shouldn't it be.

    Some information about primops is needed for simplification and type
analysis.  The information is needed to determine flow of control and which
the types of arguments primops need.  Early binding doesn't provide 'hard'
information the way the primops do.  An integrable procedure mutates the code
tree and is invisible to the compiler in the sense that it could be done by
a preprocessor.

     -  Are closed compiled versions of integrable early bindings
        needed anywhere other than in the interpreter?  How are the
        closed compiled versions generated?

    The closed compiled versions are generated by compiling the definitions.
The compiler at the same time produces a 'support object' that contains early
binding information relevent to the compiled file.  Other files that are to
compiled using the early binding definitions have something in their herald
form so the the 'support object' is loaded into the compiler's support
environment.

     -  How does the assembler fit into all of this?  Are the
        instruction formats defined by the assembler used only in the 
        primop definitions.

    In primop definitions and other compiler procedures.  Not in anything else.
