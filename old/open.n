Interrupt
>> #F
>> 
;;; Free variables (50): (CHAR<= CHAR>= CHARN= CHAR> CHAR< CHAR->ASCII CHAR=
FIXNUM-ODD? FIXNUM-EVEN? FIXNUM-NOT-ZERO? FIXNUM-NOT-POSITIVE? FIXNUM-ZERO?
FIXNUM-NEGATIVE? FIXNUM-POSITIVE? FIXNUM-MAX FIXNUM-MIN FIXNUM-NEGATE FIXNUM-ABS
FIXNUM-NOT-GREATER? FIXNUM-NOT-LESS? FIXNUM-EQUAL? FIXNUM-NOT-EQUAL? FIXNUM-LESS?
FIXNUM-GREATER? STRING-NTHTAIL! STRING-NTHTAIL CHOPY STRING-TAIL! STRING-TAIL
STRING? STRING-EMPTY? NON-EMPTY-STRING? NEQ? MEMQ? MEMQ MEM MEM? NEWLINE?
*EOF* EOF? FIXNUM? FIXNUM-NOT-NEGATIVE? NONNEGATIVE-FIXNUM? **NO-MORE-COND-CLAUSES**
NULL-LIST? LIST? PAIR? ATOM? NULL? ENFORCE CHECK-ARG UNDEFINED-EFFECT PROCLAIM
COND-=>-AUX IDENTITY NTH PROJN PROJ3 PROJ2 PROJ1 PROJ0 ALWAYS EQ? OR-AUX
BOOLEAN? FALSE? NOT *STRING-LENGTH-LIMIT* *NUMBER-OF-CHAR-CODES* *NULL-CHAR*
NIL ELSE T)
;;; Defining 'SUPPORT/INTEGRABLE' support for CHAR<=
;;; Defining 'SUPPORT/INTEGRABLE' support for CHAR>=
;;; Defining 'SUPPORT/INTEGRABLE' support for CHARN=
;;; Defining 'SUPPORT/INTEGRABLE' support for CHAR>
;;; Defining 'SUPPORT/INTEGRABLE' support for CHAR<
;;; Early binding (52): CHAR->ASCII
;;; Defining 'SUPPORT/INTEGRABLE' support for CHAR=
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-EVEN?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NOT-ZERO?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NOT-POSITIVE?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-ZERO?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NEGATIVE?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-POSITIVE?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-MAX
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-MIN
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-ABS
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NOT-GREATER?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NOT-LESS?
;;; Early binding (53): FIXNUM-EQUAL?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NOT-EQUAL?
;;; Early binding (54): FIXNUM-LESS?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-GREATER?
;;; Defining 'SUPPORT/INTEGRABLE' support for STRING-NTHTAIL
;;; Defining 'SUPPORT/INTEGRABLE' support for STRING-TAIL
;;; Early binding (55): STRING?
;;; Defining 'SUPPORT/INTEGRABLE' support for NON-EMPTY-STRING?
;;; Defining 'SUPPORT/INTEGRABLE' support for NEQ?
;;; Defining 'SUPPORT/INTEGRABLE' support for MEMQ?
;;; Defining 'SUPPORT/INTEGRABLE' support for MEMQ
;;; Defining 'SUPPORT/INTEGRABLE' support for MEM?
;;; Defining 'SUPPORT/INTEGRABLE' support for NEWLINE?
;;; Defining 'SUPPORT/INTEGRABLE' support for EOF?
;;; Early binding (56): FIXNUM?
;;; Defining 'SUPPORT/INTEGRABLE' support for FIXNUM-NOT-NEGATIVE?
;;; Defining 'SUPPORT/INTEGRABLE' support for NONNEGATIVE-FIXNUM?
;;; Defining 'SUPPORT/INTEGRABLE' support for NULL-LIST?
;;; Early binding (57): LIST?
;;; Defining 'SUPPORT/INTEGRABLE' support for PAIR?
;;; Defining 'SUPPORT/INTEGRABLE' support for ATOM?
;;; Defining 'SUPPORT/INTEGRABLE' support for NULL?
;;; Defining 'SUPPORT/CONSTANT' support for ENFORCE
;;; Defining 'SUPPORT/INTEGRABLE' support for CHECK-ARG
;;; Early binding (58): UNDEFINED-EFFECT
;;; Defining 'SUPPORT/INTEGRABLE' support for PROCLAIM
;;; Defining 'SUPPORT/INTEGRABLE' support for COND-=>-AUX
;;; Defining 'SUPPORT/INTEGRABLE' support for IDENTITY
;;; Defining 'SUPPORT/INTEGRABLE' support for PROJN
;;; Defining 'SUPPORT/INTEGRABLE' support for PROJ3
;;; Defining 'SUPPORT/INTEGRABLE' support for PROJ2
;;; Defining 'SUPPORT/INTEGRABLE' support for PROJ1
;;; Defining 'SUPPORT/INTEGRABLE' support for PROJ0
;;; Defining 'SUPPORT/INTEGRABLE' support for ALWAYS
;;; Early binding (59): EQ?
;;; Defining 'SUPPORT/INTEGRABLE' support for OR-AUX
;;; Defining 'SUPPORT/INTEGRABLE' support for BOOLEAN?
;;; Defining 'SUPPORT/INTEGRABLE' support for FALSE?
;;; Defining 'SUPPORT/INTEGRABLE' support for NOT
;;; Defining 'SUPPORT/CONSTANT' support for *STRING-LENGTH-LIMIT*
;;; Defining 'SUPPORT/CONSTANT' support for *NUMBER-OF-CHAR-CODES*
;;; Defining 'SUPPORT/CONSTANT' support for *NULL-CHAR*
;;; Defining 'SUPPORT/CONSTANT' support for NIL
;;; Defining 'SUPPORT/CONSTANT' support for ELSE
;;; Defining 'SUPPORT/CONSTANT' support for T
;;; Free variables (60): (FIXNUM-ODD? FIXNUM-NEGATE STRING-NTHTAIL! CHOPY
STRING-TAIL! STRING-EMPTY? MEM *EOF* **NO-MORE-COND-CLAUSES** NTH)
;;; Defined variables (61): (CHAR<= CHAR>= CHARN= CHAR> CHAR< CHAR= FIXNUM-EVEN?
FIXNUM-NOT-ZERO? FIXNUM-NOT-POSITIVE? FIXNUM-ZERO? FIXNUM-NEGATIVE? FIXNUM-POSITIVE?
FIXNUM-MAX FIXNUM-MIN FIXNUM-ABS FIXNUM-NOT-GREATER? FIXNUM-NOT-LESS? FIXNUM-NOT-EQUAL?
FIXNUM-GREATER? STRING-NTHTAIL STRING-TAIL NON-EMPTY-STRING? NEQ? MEMQ?
MEMQ MEM? NEWLINE? EOF? FIXNUM-NOT-NEGATIVE? NONNEGATIVE-FIXNUM? NULL-LIST?
PAIR? ATOM? NULL? ENFORCE CHECK-ARG PROCLAIM COND-=>-AUX IDENTITY PROJN
PROJ3 PROJ2 PROJ1 PROJ0 ALWAYS OR-AUX BOOLEAN? FALSE? NOT *STRING-LENGTH-LIMIT*
*NUMBER-OF-CHAR-CODES* *NULL-CHAR* NIL ELSE T)
;;; integrating: CHAR<
;;; integrating: CHAR->ASCII
;;; integrating: CHAR->ASCII
;;; integrating: FIXNUM-LESS?

** Syntax error: uncompilable object
  #{Empty}
>> 