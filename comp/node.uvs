;;; VAX TC support file for #[Filename FAUNUS TCOMP NODE T 0]
;;; TC version 1.4 (47)

(SYSBUILD-ITEM END)
(CPUT 'CONSTANT-STYPE 'DEFINED T)
(CPUT 'MAKE-CONSTANT 'DEFINED T)
(CPUT 'CONSTANT? 'DEFINED T)
(CPUT 'HANDLE-CONSTANT 'DEFINED T)
(CPUT 'CONSTANT-VALUE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'CONSTANT-VALUE 'DEFINED T)
(CPUT 'CONSTANT-VALUE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'CONS-A-CONSTANT 'MAGIC (MACRO-EXPANDER (CONS-A-CONSTANT . CRAP) (EXPAND-CONS-A
(QUOTE CONSTANT) (QUOTE (VALUE)) CRAP)))
(CPUT 'CONSTANT-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (CONSTANT?
(NODE-FORM X)))))
(CPUT 'CONSTANT-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'VARIABLE-STYPE 'DEFINED T)
(CPUT 'MAKE-VARIABLE 'DEFINED T)
(CPUT 'VARIABLE? 'DEFINED T)
(CPUT 'HANDLE-VARIABLE 'DEFINED T)
(CPUT 'VARIABLE-IDENTIFIER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'VARIABLE-IDENTIFIER 'DEFINED T)
(CPUT 'VARIABLE-IDENTIFIER 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'VARIABLE-READ-REFS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'VARIABLE-READ-REFS 'DEFINED T)
(CPUT 'VARIABLE-READ-REFS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'VARIABLE-WRITE-REFS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'VARIABLE-WRITE-REFS 'DEFINED T)
(CPUT 'VARIABLE-WRITE-REFS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'VARIABLE-KNOWN-FUNCTION 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ)
(EXTEND-ELT-FIXED OBJ 5))))
(CPUT 'VARIABLE-KNOWN-FUNCTION 'DEFINED T)
(CPUT 'VARIABLE-KNOWN-FUNCTION 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'VARIABLE-CLOSURE-REFS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'VARIABLE-CLOSURE-REFS 'DEFINED T)
(CPUT 'VARIABLE-CLOSURE-REFS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'VARIABLE-TN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 7))))
(CPUT 'VARIABLE-TN 'DEFINED T)
(CPUT 'VARIABLE-TN 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 7 VAL))))
(CPUT 'VARIABLE-BINDER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 8))))
(CPUT 'VARIABLE-BINDER 'DEFINED T)
(CPUT 'VARIABLE-BINDER 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 8 VAL))))
(CPUT 'VARIABLE-EVER-READ-REFD 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ)
(EXTEND-ELT-FIXED OBJ 9))))
(CPUT 'VARIABLE-EVER-READ-REFD 'DEFINED T)
(CPUT 'VARIABLE-EVER-READ-REFD 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 9 VAL))))
(CPUT 'VARIABLE-EVER-WRITE-REFD 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ)
(EXTEND-ELT-FIXED OBJ 10))))
(CPUT 'VARIABLE-EVER-WRITE-REFD 'DEFINED T)
(CPUT 'VARIABLE-EVER-WRITE-REFD 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 10 VAL))))
(CPUT 'VARIABLE-REP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 11))))
(CPUT 'VARIABLE-REP 'DEFINED T)
(CPUT 'VARIABLE-REP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 11 VAL))))
(CPUT 'CONS-A-VARIABLE 'MAGIC (MACRO-EXPANDER (CONS-A-VARIABLE . CRAP) (EXPAND-CONS-A
(QUOTE VARIABLE) (QUOTE (IDENTIFIER (READ-REFS (QUOTE ())) (WRITE-REFS (QUOTE
())) (KNOWN-FUNCTION NIL) (CLOSURE-REFS (QUOTE ())) (TN NIL) BINDER (EVER-READ-REFD
NIL) (EVER-WRITE-REFD NIL) REP)) CRAP)))
(CPUT 'VARIABLE-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (VARIABLE?
(NODE-FORM X)))))
(CPUT 'VARIABLE-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'STATIC-STYPE 'DEFINED T)
(CPUT 'MAKE-STATIC 'DEFINED T)
(CPUT 'STATIC? 'DEFINED T)
(CPUT 'HANDLE-STATIC 'DEFINED T)
(CPUT 'STATIC-PROPERTIES 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'STATIC-PROPERTIES 'DEFINED T)
(CPUT 'STATIC-PROPERTIES 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'STATIC-IDENTIFIER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'STATIC-IDENTIFIER 'DEFINED T)
(CPUT 'STATIC-IDENTIFIER 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'STATIC-NAMESPACE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'STATIC-NAMESPACE 'DEFINED T)
(CPUT 'STATIC-NAMESPACE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'CONS-A-STATIC 'MAGIC (MACRO-EXPANDER (CONS-A-STATIC . CRAP) (EXPAND-CONS-A
(QUOTE STATIC) (QUOTE (PROPERTIES IDENTIFIER NAMESPACE)) CRAP)))
(CPUT 'STATIC-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (STATIC? (NODE-FORM
X)))))
(CPUT 'STATIC-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'SETQ-STYPE 'DEFINED T)
(CPUT 'MAKE-SETQ 'DEFINED T)
(CPUT 'SETQ? 'DEFINED T)
(CPUT 'HANDLE-SETQ 'DEFINED T)
(CPUT 'SETQ-VAR 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'SETQ-VAR 'DEFINED T)
(CPUT 'SETQ-VAR 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
2 VAL))))
(CPUT 'SETQ-BODY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'SETQ-BODY 'DEFINED T)
(CPUT 'SETQ-BODY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'SETQ-DEFINITIONP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'SETQ-DEFINITIONP 'DEFINED T)
(CPUT 'SETQ-DEFINITIONP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'SETQ-LOCALP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'SETQ-LOCALP 'DEFINED T)
(CPUT 'SETQ-LOCALP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'CONS-A-SETQ 'MAGIC (MACRO-EXPANDER (CONS-A-SETQ . CRAP) (EXPAND-CONS-A
(QUOTE SETQ) (QUOTE (VAR BODY DEFINITIONP LOCALP)) CRAP)))
(CPUT 'SETQ-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (SETQ? (NODE-FORM
X)))))
(CPUT 'SETQ-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LAMBDA-STYPE 'DEFINED T)
(CPUT 'MAKE-LAMBDA 'DEFINED T)
(CPUT 'LAMBDA? 'DEFINED T)
(CPUT 'HANDLE-LAMBDA 'DEFINED T)
(CPUT 'LAMBDA-VARS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'LAMBDA-VARS 'DEFINED T)
(CPUT 'LAMBDA-VARS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'LAMBDA-RESTVAR 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'LAMBDA-RESTVAR 'DEFINED T)
(CPUT 'LAMBDA-RESTVAR 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'LAMBDA-BODY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'LAMBDA-BODY 'DEFINED T)
(CPUT 'LAMBDA-BODY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'LAMBDA-EFFECTS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'LAMBDA-EFFECTS 'DEFINED T)
(CPUT 'LAMBDA-EFFECTS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'LAMBDA-AFFECTED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'LAMBDA-AFFECTED 'DEFINED T)
(CPUT 'LAMBDA-AFFECTED 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'LAMBDA-STRATEGY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 7))))
(CPUT 'LAMBDA-STRATEGY 'DEFINED T)
(CPUT 'LAMBDA-STRATEGY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 7 VAL))))
(CPUT 'LAMBDA-ARGTNS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 8))))
(CPUT 'LAMBDA-ARGTNS 'DEFINED T)
(CPUT 'LAMBDA-ARGTNS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 8 VAL))))
(CPUT 'LAMBDA-HAS-CALLS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 9))))
(CPUT 'LAMBDA-HAS-CALLS 'DEFINED T)
(CPUT 'LAMBDA-HAS-CALLS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 9 VAL))))
(CPUT 'LAMBDA-REGION 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 10))))
(CPUT 'LAMBDA-REGION 'DEFINED T)
(CPUT 'LAMBDA-REGION 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 10 VAL))))
(CPUT 'LAMBDA-GENTAG 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 11))))
(CPUT 'LAMBDA-GENTAG 'DEFINED T)
(CPUT 'LAMBDA-GENTAG 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 11 VAL))))
(CPUT 'LAMBDA-NAME 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 12))))
(CPUT 'LAMBDA-NAME 'DEFINED T)
(CPUT 'LAMBDA-NAME 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 12 VAL))))
(CPUT 'LAMBDA-FIRST-CALL 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 13))))
(CPUT 'LAMBDA-FIRST-CALL 'DEFINED T)
(CPUT 'LAMBDA-FIRST-CALL 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 13 VAL))))
(CPUT 'CONS-A-LAMBDA 'MAGIC (MACRO-EXPANDER (CONS-A-LAMBDA . CRAP) (EXPAND-CONS-A
(QUOTE LAMBDA) (QUOTE (VARS (RESTVAR *EMPTY*) BODY EFFECTS AFFECTED STRATEGY
ARGTNS (HAS-CALLS NIL) REGION (GENTAG *EMPTY*) (NAME NIL) (FIRST-CALL NIL)))
CRAP)))
(CPUT 'LAMBDA-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (LAMBDA? (NODE-FORM
X)))))
(CPUT 'LAMBDA-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LABELS-STYPE 'DEFINED T)
(CPUT 'MAKE-LABELS 'DEFINED T)
(CPUT 'LABELS? 'DEFINED T)
(CPUT 'HANDLE-LABELS 'DEFINED T)
(CPUT 'LABELS-VARS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'LABELS-VARS 'DEFINED T)
(CPUT 'LABELS-VARS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'LABELS-VALS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'LABELS-VALS 'DEFINED T)
(CPUT 'LABELS-VALS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'LABELS-BODY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'LABELS-BODY 'DEFINED T)
(CPUT 'LABELS-BODY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'LABELS-REFS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'LABELS-REFS 'DEFINED T)
(CPUT 'LABELS-REFS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'LABELS-SETQS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'LABELS-SETQS 'DEFINED T)
(CPUT 'LABELS-SETQS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'CONS-A-LABELS 'MAGIC (MACRO-EXPANDER (CONS-A-LABELS . CRAP) (EXPAND-CONS-A
(QUOTE LABELS) (QUOTE (VARS VALS BODY REFS SETQS)) CRAP)))
(CPUT 'LABELS-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (LABELS? (NODE-FORM
X)))))
(CPUT 'LABELS-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CATCH-STYPE 'DEFINED T)
(CPUT 'MAKE-CATCH 'DEFINED T)
(CPUT 'CATCH? 'DEFINED T)
(CPUT 'HANDLE-CATCH 'DEFINED T)
(CPUT 'CATCH-VAR 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'CATCH-VAR 'DEFINED T)
(CPUT 'CATCH-VAR 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'CATCH-BODY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'CATCH-BODY 'DEFINED T)
(CPUT 'CATCH-BODY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'CATCH-STRATEGY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'CATCH-STRATEGY 'DEFINED T)
(CPUT 'CATCH-STRATEGY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'CONS-A-CATCH 'MAGIC (MACRO-EXPANDER (CONS-A-CATCH . CRAP) (EXPAND-CONS-A
(QUOTE CATCH) (QUOTE (VAR BODY STRATEGY)) CRAP)))
(CPUT 'CATCH-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (CATCH? (NODE-FORM
X)))))
(CPUT 'CATCH-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'BLOCK-STYPE 'DEFINED T)
(CPUT 'MAKE-BLOCK 'DEFINED T)
(CPUT 'BLOCK? 'DEFINED T)
(CPUT 'HANDLE-BLOCK 'DEFINED T)
(CPUT 'BLOCK-ARGS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'BLOCK-ARGS 'DEFINED T)
(CPUT 'BLOCK-ARGS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'CONS-A-BLOCK 'MAGIC (MACRO-EXPANDER (CONS-A-BLOCK . CRAP) (EXPAND-CONS-A
(QUOTE BLOCK) (QUOTE (ARGS)) CRAP)))
(CPUT 'BLOCK-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (BLOCK? (NODE-FORM
X)))))
(CPUT 'BLOCK-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'IF-STYPE 'DEFINED T)
(CPUT 'MAKE-IF 'DEFINED T)
(CPUT 'IF? 'DEFINED T)
(CPUT 'HANDLE-IF 'DEFINED T)
(CPUT 'IF-PRED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'IF-PRED 'DEFINED T)
(CPUT 'IF-PRED 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
2 VAL))))
(CPUT 'IF-CON 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'IF-CON 'DEFINED T)
(CPUT 'IF-CON 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
3 VAL))))
(CPUT 'IF-ALT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'IF-ALT 'DEFINED T)
(CPUT 'IF-ALT 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
4 VAL))))
(CPUT 'CONS-A-IF 'MAGIC (MACRO-EXPANDER (CONS-A-IF . CRAP) (EXPAND-CONS-A
(QUOTE IF) (QUOTE (PRED CON ALT)) CRAP)))
(CPUT 'IF-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF? (NODE-FORM
X)))))
(CPUT 'IF-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CASE-STYPE 'DEFINED T)
(CPUT 'MAKE-CASE 'DEFINED T)
(CPUT 'CASE? 'DEFINED T)
(CPUT 'HANDLE-CASE 'DEFINED T)
(CPUT 'CASE-KEY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'CASE-KEY 'DEFINED T)
(CPUT 'CASE-KEY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
2 VAL))))
(CPUT 'CASE-CLAUSES 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'CASE-CLAUSES 'DEFINED T)
(CPUT 'CASE-CLAUSES 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'CASE-ELSE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'CASE-ELSE 'DEFINED T)
(CPUT 'CASE-ELSE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'CASE-TYPE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'CASE-TYPE 'DEFINED T)
(CPUT 'CASE-TYPE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'CONS-A-CASE 'MAGIC (MACRO-EXPANDER (CONS-A-CASE . CRAP) (EXPAND-CONS-A
(QUOTE CASE) (QUOTE (KEY CLAUSES ELSE TYPE)) CRAP)))
(CPUT 'CASE-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (CASE? (NODE-FORM
X)))))
(CPUT 'CASE-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CALL-STYPE 'DEFINED T)
(CPUT 'MAKE-CALL 'DEFINED T)
(CPUT 'CALL? 'DEFINED T)
(CPUT 'HANDLE-CALL 'DEFINED T)
(CPUT 'CALL-FUNCTION 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'CALL-FUNCTION 'DEFINED T)
(CPUT 'CALL-FUNCTION 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'CALL-ARGS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'CALL-ARGS 'DEFINED T)
(CPUT 'CALL-ARGS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'CALL-STRATEGY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'CALL-STRATEGY 'DEFINED T)
(CPUT 'CALL-STRATEGY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'CONS-A-CALL 'MAGIC (MACRO-EXPANDER (CONS-A-CALL . CRAP) (EXPAND-CONS-A
(QUOTE CALL) (QUOTE (FUNCTION ARGS STRATEGY)) CRAP)))
(CPUT 'CALL-NODE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (CALL? (NODE-FORM
X)))))
(CPUT 'CALL-NODE? 'DEFINED (QUOTE (1 . 1)))

