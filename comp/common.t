(HERALD (TCOMP COMMON T 109)
        (ENV TCOMP))

;;; Copyright (c) 1983, 1984 Yale University

;;; Shared code for Vax and 68000 code generators, and, probably,
;;; for any byte-addressable, 32-bit machine.


(DEFINE-INTEGRABLE REGISTER? SYMBOL?)

(DEFINE *PUSH* '(-REG SP))

;;; True if lit's value is in [lower-bound,upper-bound]

(DEFINE (LIT-IN-RANGE? LIT-OPERAND LOWER-BOUND UPPER-BOUND)
  (AND (PAIR? LIT-OPERAND)
       (EQ? (CAR LIT-OPERAND) 'LIT)
       (LET ((VAL (MEVAL-LAP-OFFSET (CADR LIT-OPERAND))))
         (AND (FIXNUM? VAL)
              (FX>= VAL LOWER-BOUND)
              (FX<= VAL UPPER-BOUND)))))

;;; This must be called for every instruction which contains a destination
;;; operand which might be a "push."

(DEFINE (MAYBE-INCREMENT-STACKNUM DEST)
  (COND ((ALIKEV? DEST *PUSH*)
         (INCR *STACKNUM*)
         '(REG SP))
        (ELSE DEST)))

;;; This is the same as GEN-MAKE-EXTEND but it takes a TTAG as its first arg
;;; arg instead of an operand.

(DEFINE (GEN-MAKE-EXTEND-FOO TTAG SIZE DEST)
  (GEN-MAKE-EXTEND (UNIT-ADDR-REF TTAG) SIZE DEST))

(DEFINE (GEN-TPROC PTAG)
  (UNIT-ADDR-REF PTAG))

(DEFINE (TRIVIALLY-COERCIBLE? SOURCEREP DESTREP)
  (COND ((EQ? DESTREP SOURCEREP) T)
        ((EQ? DESTREP 'NONE) T)
        ((EQ? SOURCEREP 'POINTER)
         (EQ? DESTREP 'SWFIX))
        ((EQ? SOURCEREP 'SWFIX)
         (EQ? DESTREP 'POINTER))
        (ELSE NIL)))

(DEFINE (CONSTANTLOC VAL REP)
  (CASE REP
    ((SWFIX POINTER)
     (COND ((FUNNY-CONSTANT? VAL) (VAL))
           (ELSE (QUOTE-LOC VAL))))
    ((DWFLO)
     (IF (NOT (FLONUM? VAL))
         (BUG "flonum was expected here, but found ~S instead"
              "generate unassemblable code"))
     (FLONUM-LOC VAL))
    ((MFIX HALFPESO BYTE)
     `(LIT ,(COND ((TARGET:FIXNUM? VAL) VAL)
                  (ELSE (BUG "fixnum was expected here, but found ~S instead"
                             "will use 0 instead"
                             VAL)
                        0))))
    ((MFIX*4)
     `(LIT ,(COND ((TARGET:FIXNUM? VAL) (LSH VAL 2))
                  (ELSE (BUG "fixnum was expected here, but found ~S instead"
                             "will use 0 instead"
                             VAL)
                        0))))
    ((CHAR)
     `(LIT ,(COND ((CHAR? VAL) (TARGET:CHAR->ASCII VAL))
                  (ELSE (BUG "character was expected here, but got ~S instead"
                             "will use null character as the value"
                             VAL)
                        0))))
    ((NONE)
     '(BAD-OPERAND CONSTANTLOC))
    ))

;;; This is intended to be put inside a CEVAL somewhere.

(DEFINE (EXPORT-LAP-CONSTANTS)
  `(BLOCK ,@(MAP (LAMBDA (Z)
                   `(DEFINE-CONSTANT ,Z ,(GET Z 'CONSTANT)))
                 *LAP-CONSTANTS*)))  

(DEFINE (*DEFINE-PRIMITIVE-TYPE NAME SYM VALUE)
  (LET ((PRED (CONCATENATE-SYMBOL NAME '?)))
    (CPUT PRED 'ISREP 'NONE)
    (COND ((AND (ZERO? VALUE) (OR (EQ? *TARGET-MACHINE* 'VAX)
                                  (EQ? *TARGET-MACHINE* 'PYRAMID)))
           (CPUT PRED 'PRIMOP-PREDICATE GENERATE-TAG-PREDICATE-0))
          (ELSE
           (CPUT PRED 'PRIMOP-PREDICATE GENERATE-TAG-PREDICATE)
           (CPUT PRED 'TN-SCRIPT '((ARG 1) (SPARE FOO SCRATCH-REG)))))
    (CPUT PRED 'PRIMOP T)
    (CPUT PRED 'PRIMOP-NUMBER-OF-ARGS '(1 . 1))
    (CPUT PRED 'TAG-PREDICATE-INFO SYM)
    (CPUT PRED 'EFFECTS 'NONE)
    (CPUT PRED 'AFFECTED 'NONE)
    NAME))

(DEFINE (*DEFINE-PRIMITIVE-ACCESSFN NAME TYPE COOK? OFFSET REP)
  (LET* ((SEL    (LOCAL-LOOKUP *PRIMOP-NAMESPACE* NAME T))
         (SETTER (LOCAL-LOOKUP *PRIMOP-NAMESPACE*
			       (CONCATENATE-SYMBOL 'SET- NAME) T))
         (OFF    (CONCATENATE-SYMBOL '%% NAME '-OFFSET))
         (EFF    (COND ((EQ? TYPE 'EXTEND) (LIST SETTER 'SET-EXTEND-SLOT))  ; ?
                       (ELSE (LIST SETTER)))))
    (CPUT SEL    'PRIMOP                 'FIXED-SELECTOR)
    (CPUT SEL    'PRIMOP-NUMBER-OF-ARGS  '(1 . 1))
    (CPUT SEL    'PRIMOP-GENERATE        GENERATE-FIXED-SELECTOR)
    (CPUT SEL    'FIXED-SELECTOR-OFFSET  OFF)
    (CPUT SEL    'EFFECTS                'NONE)
    (CPUT SEL    'AFFECTED               EFF)
    (CPUT SEL    'SETTER                 SETTER)
    (CPUT SETTER 'PRIMOP                 'FIXED-SETTER)
    (CPUT SETTER 'PRIMOP-NUMBER-OF-ARGS  '(2 . 2))
    (CPUT SETTER 'PRIMOP-GENERATE        GENERATE-FIXED-SETTER)
    (CPUT SETTER 'FIXED-SETTER-SELECTOR  SEL)
;   (CPUT SETTER 'ISREP                  'NONE)
    (CPUT SETTER 'EFFECTS                EFF)
    (CPUT SETTER 'AFFECTED               'NONE)
    (COND ((AND *TARGET-INDIRECTION?* (NOT COOK?) (FX= OFFSET 0))
           (CPUT SEL    'ARGUMENT-RESTRICTIONS '((INDIRECTABLE)))
           (CPUT SETTER 'ARGUMENT-RESTRICTIONS '((INDIRECTABLE) #f)))
          (ELSE
           (CPUT SEL    'ARGUMENT-RESTRICTIONS '((POINTER-REG)))
           (CPUT SETTER 'ARGUMENT-RESTRICTIONS '((POINTER-REG) #f))
           ))
    (CPUT SETTER 'TN-SCRIPT '((ARG 2) (ARG 1) (PREF (ARG 2) (RESULT))))
    (COND (REP
           (CPUT SEL    'ISREP   REP)
           (CPUT SETTER 'ISREP   REP)
           (CPUT SETTER 'WANTREP `(POINTER ,REP))))
    (PUT  OFF 'SYM
          (COND (COOK? `(- ,OFFSET ,(CONCATENATE-SYMBOL '%% TYPE '-TAG)))
                (ELSE OFFSET)))
    NAME))

;;; Note that pointers to this procedure (and the next) get snarfed by
;;;  *DEFINE-blah (above).  Careful.

(DEFINE (GENERATE-FIXED-SELECTOR NODE FALL-THROUGH? LOC)
  (LET ((FM (NODE-FORM NODE)))
    (LET ((OFFSET (CGET (NODE-FORM (CALL-FUNCTION FM))
                        'FIXED-SELECTOR-OFFSET)))
      (EMITCOMMENT NIL NODE)
      (YIELD NODE
             (SREF LOC OFFSET)
             FALL-THROUGH?))))

;;; What about lifetime info - LOC2 gets used to yield the result...?
;;; Hack ALIASP stuff right to be INDIRECTABLE if offset is 0.

(DEFINE (GENERATE-FIXED-SETTER NODE FALL-THROUGH? LOC1 LOC2)
  (LET ((FM (NODE-FORM NODE)))
    (LET ((OFFSET (CGET (CGET (NODE-FORM (CALL-FUNCTION FM))
                              'FIXED-SETTER-SELECTOR)
                        'FIXED-SELECTOR-OFFSET))
          (ARG2 (CADR (CALL-ARGS (NODE-FORM NODE)))))
      (EMITCOMMENT NIL NODE)
      (XMOVE LOC2
             (SREF LOC1 OFFSET)
             (NODE-WANTREP ARG2)
             (TN-SIZE (NODE-WANTTN ARG2)))
      (YIELD NODE LOC2 FALL-THROUGH?))))

;;; Horrible low-level primitive for use by GC.

(DEFINE-GENERATOR %LOC (NODE FALL-THROUGH? LOC1 LOC2)
  (IGNORE LOC1)
  (LET ((FM (NODE-FORM NODE)))
    (LET ((OFFSET (CGET (NODE-FORM (CAR (CALL-ARGS FM)))
                        'FIXED-SELECTOR-OFFSET)))
      (EMITCOMMENT NIL NODE)
      (YIELD NODE
             `(ADDR ,(SREF LOC2 OFFSET))
             FALL-THROUGH?))))
(CPUT '%LOC 'WANTREP '(NONE POINTER))
(CPUT '%LOC 'ARGUMENT-RESTRICTIONS '(#f (POINTER-REG)))

;;; T means the offset is from the "type-blasted" pointer, #f means
;;; from the raw pointer.

(DEFINE-PRIMITIVE-ACCESSFN CAR               PAIR     T  0)
(DEFINE-PRIMITIVE-ACCESSFN CDR               PAIR     T  4)

(DEFINE-PRIMITIVE-ACCESSFN EXTEND-TEMPLATE   EXTEND   #f -4)

;;; SYSGEN depends on knowing what these are.

(DEFINE-PRIMITIVE-ACCESSFN SYMBOL-VCELL      EXTEND   #f 0)
(DEFINE-PRIMITIVE-ACCESSFN SYMBOL-PNAME      EXTEND   #f 4)
(DEFINE-PRIMITIVE-ACCESSFN SYMBOL-PLIST      EXTEND   #f 8)
(DEFINE-LAP-CONSTANT %%SYMBOL-SIZE 3)   ; 3 pesos

(DEFINE-PRIMITIVE-ACCESSFN VCELL-CONTENTS    EXTEND   #f 0)
(DEFINE-PRIMITIVE-ACCESSFN VCELL-ID          EXTEND   #f 4)
(DEFINE-PRIMITIVE-ACCESSFN VCELL-INFO        EXTEND   #f 8)
(DEFINE-LAP-CONSTANT %%VCELL-SIZE 3)    ; 3 pesos

(DEFINE-PRIMITIVE-ACCESSFN ESCAPE-PROCEDURE-FRAME EXTEND   #f 0)
(DEFINE-LAP-CONSTANT %%ESCAPE-PROCEDURE-SIZE 1) ; 1 peso

(DEFINE-PRIMITIVE-ACCESSFN VECTOR-LENGTH     EXTEND   T  -4 SWFIX)

(DEFINE-PRIMITIVE-ACCESSFN BYTEV-LENGTH      EXTEND   T  -4 SWFIX)

(DEFINE-PRIMITIVE-ACCESSFN BITV-LENGTH       EXTEND   T  -4 SWFIX)

(DEFINE-PRIMITIVE-ACCESSFN UNIT-CODE             EXTEND   #f  0)
(DEFINE-PRIMITIVE-ACCESSFN UNIT-THING            EXTEND   #f  4)
(DEFINE-PRIMITIVE-ACCESSFN UNIT-SOURCE-FILE-NAME EXTEND   #f  8)
(DEFINE-PRIMITIVE-ACCESSFN UNIT-SOURCE-FILENAME  EXTEND   #f  8)
(DEFINE-PRIMITIVE-ACCESSFN UNIT-ID               EXTEND   #f  12)
(DEFINE-PRIMITIVE-ACCESSFN UNIT-ENV              EXTEND   #f  16)
(DEFINE-PRIMITIVE-ACCESSFN UNIT-HERALD           EXTEND   #f  20)

(DEFINE-PRIMITIVE-ACCESSFN CODE-MAGIC-NUMBER         FIXNUM #f 0)
(DEFINE-PRIMITIVE-ACCESSFN CODE-SIZE                 FIXNUM #f 4)
(DEFINE-PRIMITIVE-ACCESSFN CODE-STRUCTURE-AREA-INDEX FIXNUM #f 8)
(DEFINE-PRIMITIVE-ACCESSFN CODE-STRING-AREA-INDEX    FIXNUM #f 12)
(DEFINE-PRIMITIVE-ACCESSFN CODE-SCRATCH-AREA-INDEX   FIXNUM #f 16)
(DEFINE-PRIMITIVE-ACCESSFN CODE-UNIT-SIZE            FIXNUM #f 20)
(DEFINE-PRIMITIVE-ACCESSFN CODE-CODE-SIZE            FIXNUM #f 24)

(DEFINE-PRIMITIVE-ACCESSFN BOGUS-ENTITY-PROCEDURE EXTEND   #f 0)
(DEFINE-PRIMITIVE-ACCESSFN BOGUS-ENTITY-HANDLER   EXTEND   #f 4)
(DEFINE-LAP-CONSTANT %%BOGUS-ENTITY-SIZE 2)     ; 2 pesos

(define-primitive-accessfn %operation-default     extend #f 0)
(define-primitive-accessfn %operation-id          extend #f 4)
(define-primitive-accessfn %operation-argspectrum extend #f 8)
(define-primitive-accessfn %operation-handler     extend #f 12)
(define-primitive-accessfn %operation-cache-obj   extend #f 16)
(define-primitive-accessfn %operation-cache-new-obj  extend #f 20)
(define-primitive-accessfn %operation-cache-new-next extend #f 24)
(define-primitive-accessfn %operation-cache-method   extend #f 28)
(define-lap-constant %%operation-size 8)

(define-primitive-accessfn %state-obj   extend #f -8)
(define-primitive-accessfn %state-op    extend #f -12)
(define-primitive-accessfn %state-next  extend #f -16)
(define-primitive-accessfn %state-self  extend #f -20)

(DEFINE-PRIMITIVE-ACCESSFN XENOID-POINTER    EXTEND   #f 0)
(DEFINE-PRIMITIVE-ACCESSFN XENOID->FIXNUM    EXTEND   #f 0 MFIX)
;(DEFINE-PRIMITIVE-ACCESSFN XENOID->HALFPESO  EXTEND   #f 0 HALFPESO)
;(DEFINE-PRIMITIVE-ACCESSFN XENOID->BYTE      EXTEND   #f 0 BYTE)
;(DEFINE-PRIMITIVE-ACCESSFN XENOID->CHARACTER EXTEND   #f 0 CHAR)
(DEFINE-LAP-CONSTANT %%XENOID-SIZE 1)   ; 1 peso

(DEFINE-PRIMITIVE-ACCESSFN FLONUM-LOW-PESO   FLONUM   T  0)  ;Used by GC
(DEFINE-PRIMITIVE-ACCESSFN FLONUM-HIGH-PESO  FLONUM   T  4)

;;; Make these agree with OUTPUT-STRING.  See file EMIT.

(DEFINE-PRIMITIVE-ACCESSFN STRING-LENGTH    STRING   T  0 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN STRING-POINTER   STRING   T  2)      ;Dirty!
(DEFINE-PRIMITIVE-ACCESSFN STRING-BASE      STRING   T  6 HALFPESO)

(DEFINE-PRIMITIVE-ACCESSFN TEXT-LENGTH      POINTER  #f -2 HALFPESO)

(DEFINE-PRIMITIVE-ACCESSFN TEMPLATE-LOW-BYTE    TEMPLATE T  0 BYTE)
(DEFINE-PRIMITIVE-ACCESSFN TEMPLATE-JUMP-OPCODE TEMPLATE #f 0 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN TEMPLATE-CHUNK       TEMPLATE #f 2)

(DEFINE-PRIMITIVE-ACCESSFN CHUNK-EXTRA-SLOT-2     POINTER #f -14 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-EXTRA-SLOT-1     POINTER #f -12 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-EXTRA-SLOT-0     POINTER #f -10 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-POINTER-MEM-SIZE POINTER #f -10 BYTE)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-SCRATCH-MEM-SIZE POINTER #f -9  BYTE)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-NARGS            POINTER #f -8  BYTE)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-SUBTYPE-BITS     POINTER #f -7 BYTE)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-GC-METHOD-OFFSET POINTER #f -6 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-POINTER-COUNT    POINTER #f -6 BYTE)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-SCRATCH-COUNT    POINTER #f -5 BYTE)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-SUPERIOR-OFFSET  POINTER #f -4 HALFPESO)
(DEFINE-PRIMITIVE-ACCESSFN CHUNK-UNIT-OFFSET      POINTER #f -2 HALFPESO)


(DEFINE-GENERATOR FIXNUM->POINTER (NODE FALL-THROUGH? LOC1)
  (YIELD NODE LOC1 FALL-THROUGH?))
(CPUT 'FIXNUM->POINTER 'WANTREP '(MFIX))
;(CPUT 'FIXNUM->POINTER 'AFFECTED 'NONE) ;this mustn't constant-fold!
(CPUT 'FIXNUM->POINTER 'EFFECTS 'NONE)

(DEFINE-GENERATOR POINTER->FIXNUM (NODE FALL-THROUGH? LOC1)
  (YIELD NODE LOC1 FALL-THROUGH?))
(CPUT 'POINTER->FIXNUM 'ISREP 'MFIX)
(CPUT 'POINTER->FIXNUM 'AFFECTED 'NONE)
(CPUT 'POINTER->FIXNUM 'EFFECTS 'NONE)

(DEFINE-GENERATOR COPY-FLONUM (NODE FALL-THROUGH? LOC1)
  (YIELD NODE LOC1 FALL-THROUGH?))
(CPUT 'COPY-FLONUM 'WANTREP 'DWFLO)
(CPUT 'COPY-FLONUM 'ISREP   'DWFLO)
(CPUT 'COPY-FLONUM 'AFFECTED 'NONE)
(CPUT 'COPY-FLONUM 'EFFECTS 'NONE)

(DEFINE-GENERATOR SYMBOL-TEMPLATE (NODE FALL-THROUGH?)
  (YIELD NODE '(SLINK SYMBOL-TEMPLATE) FALL-THROUGH?))
(CPUT 'SYMBOL-TEMPLATE 'EFFECTS 'NONE)

(DEFINE-GENERATOR VECTOR-TEMPLATE (NODE FALL-THROUGH?)
  (YIELD NODE '(SLINK VECTOR-TEMPLATE) FALL-THROUGH?))
(CPUT 'VECTOR-TEMPLATE 'EFFECTS 'NONE)

(DEFINE-GENERATOR HEAP-POINTER (NODE FALL-THROUGH?)
  (YIELD NODE 'HP FALL-THROUGH?))
(CPUT 'HEAP-POINTER 'EFFECTS 'NONE)

(DEFINE-GENERATOR SET-HEAP-POINTER (NODE FALL-THROUGH? LOC1)
  (EMITCOMMENT NIL NODE)
  (YIELD NODE (MOVE LOC1 'HP) FALL-THROUGH?))
(CPUT 'SET-HEAP-POINTER 'AFFECTED 'NONE)
(CPUT 'HEAP-POINTER 'SETTER
      (LOCAL-LOOKUP *PRIMOP-NAMESPACE* 'SET-HEAP-POINTER T))

(DEFINE-GENERATOR THE-SLINK (NODE FALL-THROUGH?)
  (YIELD NODE 'SLP FALL-THROUGH?))
(CPUT 'THE-SLINK 'EFFECTS 'NONE)

(DEFINE-GENERATOR SET-THE-SLINK (NODE FALL-THROUGH? LOC1)
  (EMITCOMMENT NIL NODE)
  (YIELD NODE (MOVE LOC1 'SLP) FALL-THROUGH?))
(CPUT 'SET-THE-SLINK 'AFFECTED 'NONE)
(CPUT 'THE-SLINK 'SETTER
      (LOCAL-LOOKUP *PRIMOP-NAMESPACE* 'SET-THE-SLINK T))

;;; This primop is not intended to produce a "reasonable" value - really it's
;;; only good for range checks of various sorts: "does this point into the
;;; stack?"

(DEFINE-GENERATOR STACK-POINTER (NODE FALL-THROUGH?)
  (YIELD NODE 'SP FALL-THROUGH?))
(CPUT 'STACK-POINTER 'EFFECTS 'NONE)

(DEFINE-GENERATOR %THE-UNIT-ENVIRONMENT (NODE FALL-THROUGH?)
  (YIELD NODE (UNIT-REF `(+ ,*THE-UNIT-TAG* %%UNIT-ENV-OFFSET)) FALL-THROUGH?))

(DEFINE-GENERATOR NO-OP (NODE FALL-THROUGH? LOC1)
  (YIELD NODE LOC1 FALL-THROUGH?))

(DEFINE-GENERATOR TEMPLATE-GUTS (NODE FALL-THROUGH?)
  (YIELD NODE '(SLINK TEMPLATE-GUTS) FALL-THROUGH?))
