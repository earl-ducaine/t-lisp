;;; VAX TC support file for #[Filename FAUNUS TCOMP MACHAX T 0]
;;; TC version 1.4 (47)

(SYSBUILD-ITEM END)
(CPUT 'FUNCTION 'MAGIC (MACRO-EXPANDER (FUNCTION X) X))
(CPUT 'PROGN 'MAGIC (MACRO-EXPANDER (PROGN . REST) (#[Internal-syntax *BACKQUOTE*]
(BLOCK #[Internal-syntax *COMMA*] REST))))
(CPUT 'PROG1 'MAGIC (MACRO-EXPANDER (PROG1 . REST) (#[Internal-syntax *BACKQUOTE*]
(BLOCK0 #[Internal-syntax *COMMA*] REST))))
(CPUT 'SETF 'MAGIC (MACRO-EXPANDER (SETF . REST) (#[Internal-syntax *BACKQUOTE*]
(SET #[Internal-syntax *COMMA*] REST))))
(CPUT 'SETQ 'MAGIC (MACRO-EXPANDER (SETQ . REST) (#[Internal-syntax *BACKQUOTE*]
(SET-VAR #[Internal-syntax *COMMA*] REST))))
(CPUT 'FUNCALL 'MAGIC (MACRO-EXPANDER (FUNCALL . REST) REST))
(CPUT 'DECLARE 'MAGIC (MACRO-EXPANDER (DECLARE . REST) (IGNORE REST) (QUOTE
(QUOTE DECLARE))))
(CPUT 'BREAK 'MAGIC (MACRO-EXPANDER (BREAK FOO) (#[Internal-syntax *BACKQUOTE*]
(BREAKPOINT (QUOTE (#[Internal-syntax *COMMA*] FOO))))))
(CPUT 'DEFPROP 'MAGIC (MACRO-EXPANDER (DEFPROP X Y Z) (#[Internal-syntax
*BACKQUOTE*] (PUT (QUOTE (#[Internal-syntax *COMMA*] X)) (QUOTE (#[Internal-syntax
*COMMA*] Z)) (QUOTE (#[Internal-syntax *COMMA*] Y))))))
(CPUT 'CATCHALL 'MAGIC (MACRO-EXPANDER (CATCHALL X . BODY) (#[Internal-syntax
*BACKQUOTE*] (BLOCK #[Internal-syntax *COMMA*] BODY))))
(CPUT 'STATUS 'MAGIC (MACRO-EXPANDER (STATUS . REST) (IGNORE REST) (QUOTE
NIL)))
(CPUT 'IF-MACLISP 'MAGIC (MACRO-EXPANDER (IF-MACLISP MAC . TAU) (IGNORE
MAC) (#[Internal-syntax *BACKQUOTE*] (BLOCK #[Internal-syntax *COMMA*] TAU))))
(CPUT 'EVAL-WHEN 'MAGIC (MACRO-EXPANDER (EVAL-WHEN WHEN . REST) (IF (MEMQ
(QUOTE EVAL) WHEN) (#[Internal-syntax *BACKQUOTE*] (BLOCK #[Internal-syntax
*COMMA*] REST)))))
(CPUT 'D0 'MAGIC (MACRO-EXPANDER (D0 . REST) (#[Internal-syntax *BACKQUOTE*]
(CATCH RETURN (DO #[Internal-syntax *COMMA*] REST)))))
(CPUT 'QLOZURE 'MAGIC (MACRO-EXPANDER (QLOZURE VARS PROC . METHS) (IGNORE
VARS) (COND ((NULL? METHS) PROC) (ELSE (#[Internal-syntax *BACKQUOTE*] (OBJECT
(#[Internal-syntax *COMMA*] PROC) #[Internal-syntax *COMMA*] METHS))))))
(CPUT 'IOTA 'MAGIC (MACRO-EXPANDER (IOTA . REST) (#[Internal-syntax *BACKQUOTE*]
(WITH-OPEN-FILES #[Internal-syntax *COMMA*] REST))))
(CPUT 'PROGV 'MAGIC (MACRO-EXPANDER (PROGV VARS VALS . BODY) (#[Internal-syntax
*BACKQUOTE*] (PROGV-HANDLER (#[Internal-syntax *COMMA*] VARS) (#[Internal-syntax
*COMMA*] VALS) (LAMBDA () #[Internal-syntax *COMMA*] BODY)))))
(CPUT 'PROGV-HANDLER 'DEFINED (QUOTE (3 . 3)))
(CPUT 'DEFUN 'MAGIC (MACRO-EXPANDER (DEFUN STUFF ARGS . REST) (COND ((NOT
(PAIR? STUFF)) (ERROR "losing DEFUN - ~S" STUFF)) (ELSE (#[Internal-syntax
*BACKQUOTE*] (PUT (QUOTE (#[Internal-syntax *COMMA*] (CAR STUFF))) (QUOTE
(#[Internal-syntax *COMMA*] (CADR STUFF))) (LAMBDA (#[Internal-syntax *COMMA*]
ARGS) #[Internal-syntax *COMMA*] REST)))))))
(CPUT 'DEFVST 'MAGIC (MACRO-EXPANDER (DEFVST TYPE . SPECS) (#[Internal-syntax
*BACKQUOTE*] (BLOCK (DEFINE-STRUCTURE-TYPE (#[Internal-syntax *COMMA*] TYPE)
(#[Internal-syntax *COMMA-ATSIGN*] (MAP (LAMBDA (SPEC) (IF (ATOM? SPEC)
SPEC (CAR SPEC))) SPECS))) (LET ((%ORIG (STYPE-MASTER (#[Internal-syntax
*COMMA*] (CONCATENATE-SYMBOL TYPE (QUOTE -STYPE)))))) (IGNORABLE %ORIG)
(#[Internal-syntax *COMMA-ATSIGN*] (MAP (LAMBDA (SPEC) (COND ((ATOM? SPEC)
(QUOTE NIL)) ((CDDR SPEC) (ERROR "whazza?")) (ELSE (#[Internal-syntax *BACKQUOTE*]
(SET ((#[Internal-syntax *COMMA*] (CONCATENATE-SYMBOL TYPE (QUOTE -) (CAR
SPEC))) %ORIG) (#[Internal-syntax *COMMA*] (CADR SPEC))))))) SPECS))) (DEFINE-MACRO
((#[Internal-syntax *COMMA*] (CONCATENATE-SYMBOL (QUOTE CONS-A-) TYPE))
. CRAP) (EXPAND-CONS-A (QUOTE (#[Internal-syntax *COMMA*] TYPE)) (QUOTE
(#[Internal-syntax *COMMA*] SPECS)) CRAP))))))
(CPUT 'EXPAND-CONS-A 'DEFINED (QUOTE (3 . 3)))
(CPUT 'WITH-OPEN-FILES 'MAGIC (MACRO-EXPANDER (WITH-OPEN-FILES SPECS . BODY)
(#[Internal-syntax *BACKQUOTE*] (WITH-OPEN-STREAMS (#[Internal-syntax *COMMA*]
(MAP (LAMBDA (SPEC) (#[Internal-syntax *BACKQUOTE*] ((#[Internal-syntax
*COMMA*] (CAR SPEC)) (OPEN (#[Internal-syntax *COMMA-ATSIGN*] (CDR SPEC))))))
SPECS)) #[Internal-syntax *COMMA*] BODY))))
(CPUT 'PRIN1 'INTEGRABLE-FUNCTION (QUOTE PRINT))
(CPUT 'PRIN1 'DEFINED T)
(CPUT 'PRIN 'INTEGRABLE-FUNCTION (QUOTE PRINT))
(CPUT 'PRIN 'DEFINED T)
(CPUT 'PRINC 'INTEGRABLE-FUNCTION (QUOTE DISPLAY))
(CPUT 'PRINC 'DEFINED T)
(CPUT 'REMPROP 'INTEGRABLE-FUNCTION (QUOTE REM-PROPERTY))
(CPUT 'REMPROP 'DEFINED T)
(CPUT '+LOAD 'INTEGRABLE-FUNCTION (QUOTE LOAD))
(CPUT '+LOAD 'DEFINED T)
(CPUT '+MAP 'INTEGRABLE-FUNCTION (QUOTE MAP))
(CPUT '+MAP 'DEFINED T)
(CPUT 'MAPCAR 'INTEGRABLE-FUNCTION (QUOTE MAP))
(CPUT 'MAPCAR 'DEFINED T)
(CPUT '+NTH 'INTEGRABLE-FUNCTION (QUOTE NTH))
(CPUT '+NTH 'DEFINED T)
(CPUT '+NTHCDR 'INTEGRABLE-FUNCTION (QUOTE NTHCDR))
(CPUT '+NTHCDR 'DEFINED T)
(CPUT '+LAST 'INTEGRABLE-FUNCTION (QUOTE LAST))
(CPUT '+LAST 'DEFINED T)
(CPUT '+APPLY 'INTEGRABLE-FUNCTION (QUOTE APPLY))
(CPUT '+APPLY 'DEFINED T)
(CPUT '+READ 'INTEGRABLE-FUNCTION (QUOTE READ))
(CPUT '+READ 'DEFINED T)
(CPUT '+EVAL 'INTEGRABLE-FUNCTION (QUOTE EVAL))
(CPUT '+EVAL 'DEFINED T)
(CPUT 'FIXNUM-IDENTITY 'INTEGRABLE-FUNCTION (QUOTE IDENTITY))
(CPUT 'FIXNUM-IDENTITY 'DEFINED T)
(CPUT 'MEMBER 'DEFINED (QUOTE (2 . 2)))
(CPUT 'ASSOC 'DEFINED (QUOTE (2 . 2)))
(CPUT 'RPLACA 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X Y) (BLOCK (SET-CAR
X Y) X))))
(CPUT 'RPLACA 'DEFINED (QUOTE (2 . 2)))
(CPUT 'RPLACD 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X Y) (BLOCK (SET-CDR
X Y) X))))
(CPUT 'RPLACD 'DEFINED (QUOTE (2 . 2)))
(CPUT 'SET-CONTENTS 'DEFINED T)
(CPUT 'SET-HPOS 'DEFINED T)
(CPUT 'STYPE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'RADIX-16-PRINT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (N STREAM) (FORMAT
STREAM (QUOTE "~X") N))))
(CPUT 'RADIX-16-PRINT 'DEFINED (QUOTE (2 . 2)))
(CPUT 'RUNTIME 'DEFINED T)
(CPUT 'GCTIME 'DEFINED T)
(CPUT 'SITE 'DEFINED (QUOTE (0 . 0)))
(CPUT '--- 'CONSTANT (QUOTE ---))
(CPUT '--- 'DEFINED T)
(CPUT '---- 'CONSTANT (QUOTE ----))
(CPUT '---- 'DEFINED T)
(CPUT 'FORMAT-NIL 'DEFINED (QUOTE (1 . 9999)))
(CPUT 'RESET-STRUCTURE 'DEFINED (QUOTE (1 . 1)))

