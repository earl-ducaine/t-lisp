(HERALD (TCOMP GMAX T 25)
        (ENV T))

;;; Copyright (c) 1983, 1984 Yale University

;;; Macros for writing code generators.

(DEFINE-MACRO (DEFINE-REP-CONVERTER CONVERSIONS ARGLIST . REST)
  (LET ((PROC (CONCATENATE-SYMBOL 'CONVERT-REP-
                          (CAAR CONVERSIONS) '-> (CADAR CONVERSIONS)))
        (SPARETN-NEEDED (COND ((EQ? (CAAR REST) 'NEED-SPARELOC)
                               (CDR (POP REST)))
                              (ELSE NIL))))
    `(BLOCK (DEFINE (,PROC ,@ARGLIST) . ,REST)
            ,@(MAP (LAMBDA (C)
                     `(SET-REP-CONVERTER ',(CAR C)
                                         ',(CADR C)
                                         ,PROC
                                         ',SPARETN-NEEDED))
                   CONVERSIONS))))

(DEFINE-MACRO (DEFINE-PRIMITIVE-ACCESSFN NAME TYPE COOK? OFFSET . REP)
  `(*DEFINE-PRIMITIVE-ACCESSFN ',NAME ',TYPE ',COOK? ',OFFSET
                               ',(IF (NOT (NULL? REP)) (CAR REP) NIL)))

(DEFINE-MACRO (DEFINE-PRIMITIVE-TYPE NAME VALUE)
  (LET ((SYM (CONCATENATE-SYMBOL '%% NAME '-TAG)))
    `(BLOCK (DEFINE-LAP-CONSTANT ,SYM ,VALUE)
            (*DEFINE-PRIMITIVE-TYPE ',NAME ',SYM ,VALUE))))

;;; Macros for defining primop code emitters.
;;; E.g. (DEFINE-GENERATOR NTHCHAR (NODE FALL-THROUGH?) ...)

(DEFINE-MACRO (DEFINE-GENERATOR P ARGLIST . BODY)
  (LET ((PROC (CONCATENATE-SYMBOL P '$GENERATE))
        (NARGS (LENGTH (CDDR ARGLIST))))
    `(BLOCK (DEFINE (,PROC ,@ARGLIST) . ,BODY)
            (CPUT ',P 'PRIMOP T)
            (CPUT ',P 'PRIMOP-NUMBER-OF-ARGS '(,NARGS . ,NARGS))
            (CPUT ',P 'PRIMOP-GENERATE ,PROC))))

;;; We assume for now that no primop predicate can cause a side-effect.

(DEFINE-MACRO (DEFINE-PREDICATE-GENERATOR P ARGLIST . BODY)
  (LET ((PROC (CONCATENATE-SYMBOL P '$GENERATE-PREDICATE))
        (NARGS (LENGTH (CDDDR ARGLIST))))
    `(BLOCK (DEFINE (,PROC ,@ARGLIST) . ,BODY)
            (CPUT ',P 'PRIMOP T)
            (CPUT ',P 'PRIMOP-PREDICATE ,PROC)
            (CPUT ',P 'PRIMOP-NUMBER-OF-ARGS '(,NARGS . ,NARGS))
            (CPUT ',P 'EFFECTS 'NONE)
;           (CPUT ',P 'META-EVALUATOR META-CALL-PRIMOP-PREDICATE)
            )))

;;; Various predicates for literals and registers

(DEFINE-MACRO (LITERAL? OPERAND)
  `(AND (PAIR? ,OPERAND) (EQ? (CAR ,OPERAND) 'LIT)))

(DEFINE-MACRO (SCRATCH-REG? OPERAND)
  `(MEMQ ,OPERAND *DATA-REGISTERS*))

(DEFINE-MACRO (POINTER-REG? OPERAND)
  `(MEMQ ,OPERAND *ADDRESS-REGISTERS*))

(DEFINE-MACRO (16-BIT-LIT? LIT-OPERAND)
  `(LIT-IN-RANGE? ,LIT-OPERAND -32768 32767))

(DEFINE-MACRO (8-BIT-LIT? LIT-OPERAND)
  `(LIT-IN-RANGE? ,LIT-OPERAND -128 127))

(DEFINE-MACRO (1-BIT-LIT? LIT-OPERAND)
  `(LIT-IN-RANGE? ,LIT-OPERAND 1 1))

(DEFINE-MACRO (QUICK-LIT? LIT-OPERAND)
  `(LIT-IN-RANGE? ,LIT-OPERAND 1 8))
