;;; VAX TC support file for #[Filename FAUNUS TCOMP DEFS T 0]
;;; TC version 1.4 (47)

(SYSBUILD-ITEM END)
(CPUT 'REGION-STYPE 'DEFINED T)
(CPUT 'MAKE-REGION 'DEFINED T)
(CPUT 'REGION? 'DEFINED T)
(CPUT 'HANDLE-REGION 'DEFINED T)
(CPUT 'REGION-OWNER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'REGION-OWNER 'DEFINED T)
(CPUT 'REGION-OWNER 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'REGION-TYPE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'REGION-TYPE 'DEFINED T)
(CPUT 'REGION-TYPE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'REGION-POINTER-MEM-SIZE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ)
(EXTEND-ELT-FIXED OBJ 4))))
(CPUT 'REGION-POINTER-MEM-SIZE 'DEFINED T)
(CPUT 'REGION-POINTER-MEM-SIZE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'REGION-SCRATCH-MEM-SIZE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ)
(EXTEND-ELT-FIXED OBJ 5))))
(CPUT 'REGION-SCRATCH-MEM-SIZE 'DEFINED T)
(CPUT 'REGION-SCRATCH-MEM-SIZE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'REGION-SIZE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'REGION-SIZE 'DEFINED T)
(CPUT 'REGION-SIZE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'CONS-A-REGION 'MAGIC (MACRO-EXPANDER (CONS-A-REGION . CRAP) (EXPAND-CONS-A
(QUOTE REGION) (QUOTE (OWNER TYPE POINTER-MEM-SIZE SCRATCH-MEM-SIZE SIZE))
CRAP)))
(CPUT 'TN-STYPE 'DEFINED T)
(CPUT 'MAKE-TN 'DEFINED T)
(CPUT 'TN? 'DEFINED T)
(CPUT 'HANDLE-TN 'DEFINED T)
(CPUT 'TN-REGION 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'TN-REGION 'DEFINED T)
(CPUT 'TN-REGION 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'TN-WEIGHT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'TN-WEIGHT 'DEFINED T)
(CPUT 'TN-WEIGHT 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'TN-LONFC 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'TN-LONFC 'DEFINED T)
(CPUT 'TN-LONFC 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
4 VAL))))
(CPUT 'TN-LONLU 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'TN-LONLU 'DEFINED T)
(CPUT 'TN-LONLU 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
5 VAL))))
(CPUT 'TN-FONFC 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'TN-FONFC 'DEFINED T)
(CPUT 'TN-FONFC 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
6 VAL))))
(CPUT 'TN-FONLU 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 7))))
(CPUT 'TN-FONLU 'DEFINED T)
(CPUT 'TN-FONLU 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
7 VAL))))
(CPUT 'TN-WANTLOC 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 8))))
(CPUT 'TN-WANTLOC 'DEFINED T)
(CPUT 'TN-WANTLOC 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 8 VAL))))
(CPUT 'TN-ISLOC 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 9))))
(CPUT 'TN-ISLOC 'DEFINED T)
(CPUT 'TN-ISLOC 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
9 VAL))))
(CPUT 'TN-PREFERENCES 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 10))))
(CPUT 'TN-PREFERENCES 'DEFINED T)
(CPUT 'TN-PREFERENCES 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 10 VAL))))
(CPUT 'TN-OWNER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 11))))
(CPUT 'TN-OWNER 'DEFINED T)
(CPUT 'TN-OWNER 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
11 VAL))))
(CPUT 'TN-SIZE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 12))))
(CPUT 'TN-SIZE 'DEFINED T)
(CPUT 'TN-SIZE 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
12 VAL))))
(CPUT 'TN-PTRP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 13))))
(CPUT 'TN-PTRP 'DEFINED T)
(CPUT 'TN-PTRP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
13 VAL))))
(CPUT 'TN-ID 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 14))))
(CPUT 'TN-ID 'DEFINED T)
(CPUT 'TN-ID 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
14 VAL))))
(CPUT 'TN-REASON 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 15))))
(CPUT 'TN-REASON 'DEFINED T)
(CPUT 'TN-REASON 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 15 VAL))))
(CPUT 'TN-CONFLICTS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 16))))
(CPUT 'TN-CONFLICTS 'DEFINED T)
(CPUT 'TN-CONFLICTS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 16 VAL))))
(CPUT 'TN-ORDER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 17))))
(CPUT 'TN-ORDER 'DEFINED T)
(CPUT 'TN-ORDER 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
17 VAL))))
(CPUT 'TN-VAR 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 18))))
(CPUT 'TN-VAR 'DEFINED T)
(CPUT 'TN-VAR 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
18 VAL))))
(CPUT 'TN-REP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 19))))
(CPUT 'TN-REP 'DEFINED T)
(CPUT 'TN-REP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
19 VAL))))
(CPUT 'TN-COMPATIBLES 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 20))))
(CPUT 'TN-COMPATIBLES 'DEFINED T)
(CPUT 'TN-COMPATIBLES 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 20 VAL))))
(CPUT 'CONS-A-TN 'MAGIC (MACRO-EXPANDER (CONS-A-TN . CRAP) (EXPAND-CONS-A
(QUOTE TN) (QUOTE (REGION (WEIGHT 0) (LONFC NIL) (LONLU -1) (FONFC NIL)
(FONLU -1) (WANTLOC (QUOTE ANY)) ISLOC (PREFERENCES (QUOTE ())) (OWNER NIL)
(SIZE 1) (PTRP T) ID (REASON NIL) (CONFLICTS (QUOTE ())) ORDER (VAR NIL)
REP (COMPATIBLES (QUOTE ())))) CRAP)))
(CPUT 'NODE-STYPE 'DEFINED T)
(CPUT 'MAKE-NODE 'DEFINED T)
(CPUT 'NODE? 'DEFINED T)
(CPUT 'HANDLE-NODE 'DEFINED T)
(CPUT 'NODE-METAP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'NODE-METAP 'DEFINED T)
(CPUT 'NODE-METAP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'NODE-SUBSTP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'NODE-SUBSTP 'DEFINED T)
(CPUT 'NODE-SUBSTP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'NODE-PARENT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'NODE-PARENT 'DEFINED T)
(CPUT 'NODE-PARENT 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'NODE-REFS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'NODE-REFS 'DEFINED T)
(CPUT 'NODE-REFS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'NODE-SETQS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'NODE-SETQS 'DEFINED T)
(CPUT 'NODE-SETQS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'NODE-EFFECTS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 7))))
(CPUT 'NODE-EFFECTS 'DEFINED T)
(CPUT 'NODE-EFFECTS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 7 VAL))))
(CPUT 'NODE-AFFECTED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 8))))
(CPUT 'NODE-AFFECTED 'DEFINED T)
(CPUT 'NODE-AFFECTED 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 8 VAL))))
(CPUT 'NODE-LEVEL 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 9))))
(CPUT 'NODE-LEVEL 'DEFINED T)
(CPUT 'NODE-LEVEL 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 9 VAL))))
(CPUT 'NODE-COMPLEXITY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 10))))
(CPUT 'NODE-COMPLEXITY 'DEFINED T)
(CPUT 'NODE-COMPLEXITY 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 10 VAL))))
(CPUT 'NODE-DEPTH 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 11))))
(CPUT 'NODE-DEPTH 'DEFINED T)
(CPUT 'NODE-DEPTH 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 11 VAL))))
(CPUT 'NODE-CONSENV 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 12))))
(CPUT 'NODE-CONSENV 'DEFINED T)
(CPUT 'NODE-CONSENV 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 12 VAL))))
(CPUT 'NODE-MIGRATIONS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 13))))
(CPUT 'NODE-MIGRATIONS 'DEFINED T)
(CPUT 'NODE-MIGRATIONS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 13 VAL))))
(CPUT 'NODE-WANTREP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 14))))
(CPUT 'NODE-WANTREP 'DEFINED T)
(CPUT 'NODE-WANTREP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 14 VAL))))
(CPUT 'NODE-ISREP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 15))))
(CPUT 'NODE-ISREP 'DEFINED T)
(CPUT 'NODE-ISREP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 15 VAL))))
(CPUT 'NODE-RESTRICTION 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 16))))
(CPUT 'NODE-RESTRICTION 'DEFINED T)
(CPUT 'NODE-RESTRICTION 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 16 VAL))))
(CPUT 'NODE-WANTTN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 17))))
(CPUT 'NODE-WANTTN 'DEFINED T)
(CPUT 'NODE-WANTTN 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 17 VAL))))
(CPUT 'NODE-ISTN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 18))))
(CPUT 'NODE-ISTN 'DEFINED T)
(CPUT 'NODE-ISTN 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 18 VAL))))
(CPUT 'NODE-SPARETNS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 19))))
(CPUT 'NODE-SPARETNS 'DEFINED T)
(CPUT 'NODE-SPARETNS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 19 VAL))))
(CPUT 'NODE-ETN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 20))))
(CPUT 'NODE-ETN 'DEFINED T)
(CPUT 'NODE-ETN 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
20 VAL))))
(CPUT 'NODE-HOLDP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 21))))
(CPUT 'NODE-HOLDP 'DEFINED T)
(CPUT 'NODE-HOLDP 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 21 VAL))))
(CPUT 'NODE-RESULTTNS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 22))))
(CPUT 'NODE-RESULTTNS 'DEFINED T)
(CPUT 'NODE-RESULTTNS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 22 VAL))))
(CPUT 'NODE-STACKNUM 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 23))))
(CPUT 'NODE-STACKNUM 'DEFINED T)
(CPUT 'NODE-STACKNUM 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 23 VAL))))
(CPUT 'NODE-GENTAG 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 24))))
(CPUT 'NODE-GENTAG 'DEFINED T)
(CPUT 'NODE-GENTAG 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 24 VAL))))
(CPUT 'NODE-FORM 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 25))))
(CPUT 'NODE-FORM 'DEFINED T)
(CPUT 'NODE-FORM 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 25 VAL))))
(CPUT 'NODE-RETURNERS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 26))))
(CPUT 'NODE-RETURNERS 'DEFINED T)
(CPUT 'NODE-RETURNERS 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 26 VAL))))
(CPUT 'NODE-LOC 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 27))))
(CPUT 'NODE-LOC 'DEFINED T)
(CPUT 'NODE-LOC 'SETTER (QUOTE (LAMBDA (OBJ VAL) (SET-EXTEND-ELT-FIXED OBJ
27 VAL))))
(CPUT 'CONS-A-NODE 'MAGIC (MACRO-EXPANDER (CONS-A-NODE . CRAP) (EXPAND-CONS-A
(QUOTE NODE) (QUOTE ((METAP NIL) SUBSTP (PARENT NIL) (REFS *EMPTY*) (SETQS
*EMPTY*) (EFFECTS *EMPTY*) (AFFECTED *EMPTY*) (LEVEL *EMPTY*) (COMPLEXITY
*EMPTY*) (DEPTH *EMPTY*) CONSENV (MIGRATIONS (QUOTE ())) WANTREP ISREP RESTRICTION
(WANTTN NIL) ISTN (SPARETNS (QUOTE ())) ETN (HOLDP NIL) (RESULTTNS (QUOTE
())) STACKNUM (GENTAG *EMPTY*) FORM RETURNERS LOC)) CRAP)))
(CPUT 'NODE-ALIASP 'INTEGRABLE-FUNCTION (QUOTE NODE-HOLDP))
(CPUT 'NODE-ALIASP 'DEFINED T)
(CPUT 'NODE-ALIASTNS 'INTEGRABLE-FUNCTION (QUOTE NODE-RESULTTNS))
(CPUT 'NODE-ALIASTNS 'DEFINED T)
(CPUT 'LEVEL-ALIASP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (NODE) (EXTEND-ELT-FIXED
(EXTEND-ELT-FIXED NODE 9) 21))))
(CPUT 'LEVEL-ALIASP 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NODE-DISPATCH 'MAGIC (MACRO-EXPANDER (NODE-DISPATCH NAME NODE . ARGS)
(LET ((GENVARS (MAP (LAMBDA (ARG) (IGNORE ARG) (GENERATE-SYMBOL (QUOTE DISPATCH)))
ARGS))) (#[Internal-syntax *BACKQUOTE*] (LET ((FM (NODE-FORM (#[Internal-syntax
*COMMA*] NODE))) (#[Internal-syntax *COMMA-ATSIGN*] (MAP LIST GENVARS ARGS)))
(XCASE (STYPE FM) (#[Internal-syntax *COMMA-ATSIGN*] (MAP (LAMBDA (TYPE)
(#[Internal-syntax *BACKQUOTE*] (((#[Internal-syntax *COMMA*] TYPE)) ((#[Internal-syntax
*COMMA*] (CONCATENATE-SYMBOL NAME (QUOTE -) TYPE)) (#[Internal-syntax *COMMA*]
NODE) FM (#[Internal-syntax *COMMA-ATSIGN*] GENVARS))))) *NODE-TYPES*))))))))
(CPUT 'DEFDISPATCH 'MAGIC (MACRO-EXPANDER (DEFDISPATCH NAME TYPE ARGS .
BODY) (LET ((DEFDISPATCH-AUX (LAMBDA (NAME TYPE ARGS DEC BODY) (LET ((PROC
(CONCATENATE-SYMBOL NAME (QUOTE -) TYPE))) (#[Internal-syntax *BACKQUOTE*]
(BLOCK (DEFINE ((#[Internal-syntax *COMMA*] PROC) (#[Internal-syntax *COMMA-ATSIGN*]
ARGS)) (#[Internal-syntax *COMMA-ATSIGN*] DEC) (IGNORABLE (#[Internal-syntax
*COMMA-ATSIGN*] ARGS)) #[Internal-syntax *COMMA*] BODY) (*DEFDISPATCH (VAR-LOCATIVE
(#[Internal-syntax *COMMA*] (CONCATENATE-SYMBOL (QUOTE *) NAME (QUOTE -DISPATCH-VECTOR*))))
(QUOTE (#[Internal-syntax *COMMA*] TYPE)) (#[Internal-syntax *COMMA*] PROC))))))))
(COND ((AND (PAIR? (CAR BODY)) (EQ? (CAAR BODY) (QUOTE DECLARE))) (DEFDISPATCH-AUX
NAME TYPE ARGS (LIST (CAR BODY)) (CDR BODY))) (ELSE (DEFDISPATCH-AUX NAME
TYPE ARGS (QUOTE ()) BODY))))))
(CPUT 'MEVAL 'MAGIC (MACRO-EXPANDER (MEVAL NODE FROB) (#[Internal-syntax
*BACKQUOTE*] (DO ((%%%%FROB%%%% (#[Internal-syntax *COMMA*] FROB) %%%%NEWFROB%%%%)
(%%%%NEWFROB%%%% (META-EVALUATE (#[Internal-syntax *COMMA*] FROB)) (META-EVALUATE
%%%%NEWFROB%%%%))) ((EQ? %%%%NEWFROB%%%% %%%%FROB%%%%)) ---- (SET (#[Internal-syntax
*COMMA*] FROB) %%%%NEWFROB%%%%) (NODE-PARENT-CHECK %%%%NEWFROB%%%% (#[Internal-syntax
*COMMA*] NODE)) (REPROPAGATE %%%%NEWFROB%%%%) ---))))
(CPUT 'INCR 'MAGIC (MACRO-EXPANDER (INCR FORM) (#[Internal-syntax *BACKQUOTE*]
(MODIFY-LOCATION (#[Internal-syntax *COMMA*] FORM) (LAMBDA (FETCH STORE)
(STORE (FX+ 1 (FETCH))))))))
(CPUT 'EMPTY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (EQ? X *EMPTY*))))
(CPUT 'EMPTY 'DEFINED (QUOTE (1 . 1)))
(CPUT 'INT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (CONS *INTERNAL* X))))
(CPUT 'INT 'DEFINED (QUOTE (1 . 1)))
(CPUT 'ADJOINF 'MAGIC (MACRO-EXPANDER (ADJOINF VALUE SLOT) (#[Internal-syntax
*BACKQUOTE*] (SET (#[Internal-syntax *COMMA*] SLOT) (ADJOIN (#[Internal-syntax
*COMMA*] VALUE) (#[Internal-syntax *COMMA*] SLOT))))))
(CPUT 'BUGLET 'MAGIC (MACRO-EXPANDER (BUGLET BINDINGS ERRORMSG FIXMSG .
ITEMS) (#[Internal-syntax *BACKQUOTE*] (BIND (#[Internal-syntax *COMMA*]
BINDINGS) (BUG (QUOTE (#[Internal-syntax *COMMA*] (FORMAT NIL "~A ~A" ERRORMSG
(CONS "look at" (MAP CAR BINDINGS))))) (#[Internal-syntax *COMMA*] FIXMSG)
#[Internal-syntax *COMMA*] ITEMS)))))
(CPUT 'STAT-COUNTER 'MAGIC (MACRO-EXPANDER (STAT-COUNTER COUNTER DOCUMENTATION)
(#[Internal-syntax *BACKQUOTE*] (BLOCK (LSET (#[Internal-syntax *COMMA*]
COUNTER) 0) (*DEFINE-STAT-COUNTER (VAR-LOCATIVE (#[Internal-syntax *COMMA*]
COUNTER)) (QUOTE (#[Internal-syntax *COMMA*] DOCUMENTATION)))))))
(CPUT 'COMPILATION-GLOBAL 'MAGIC (MACRO-EXPANDER (COMPILATION-GLOBAL NAME)
(#[Internal-syntax *BACKQUOTE*] (BLOCK (LSET (#[Internal-syntax *COMMA*]
NAME) (QUOTE *UNDEFINED*)) (SET *COMPILATION-GLOBALS* (ADJOIN (VAR-LOCATIVE
(#[Internal-syntax *COMMA*] NAME)) *COMPILATION-GLOBALS*))))))
(CPUT 'FUNREP 'MAGIC (MACRO-EXPANDER (FUNREP ISREP WANTREP . FUNS) (#[Internal-syntax
*BACKQUOTE*] (BLOCK (WALK (LAMBDA (F) (#[Internal-syntax *COMMA-ATSIGN*]
(AND ISREP (#[Internal-syntax *BACKQUOTE*] ((CPUT F (QUOTE ISREP) (QUOTE
(#[Internal-syntax *COMMA*] ISREP))))))) (#[Internal-syntax *COMMA-ATSIGN*]
(AND WANTREP (#[Internal-syntax *BACKQUOTE*] ((CPUT F (QUOTE WANTREP) (QUOTE
(#[Internal-syntax *COMMA*] WANTREP)))))))) (QUOTE (#[Internal-syntax *COMMA*]
FUNS))) (QUOTE (#[Internal-syntax *COMMA*] FUNS))))))
(CPUT 'DUMP-INTO-DEBUGGING-FILE 'MAGIC (MACRO-EXPANDER (DUMP-INTO-DEBUGGING-FILE
FILE . WHAT) (#[Internal-syntax *BACKQUOTE*] (BIND ((*NOISE-OUTPUT* (MAKE-BROADCAST-STREAM
(#[Internal-syntax *COMMA*] FILE) *NOISE-MINUS-TERMINAL*))) #[Internal-syntax
*COMMA*] WHAT))))
(CPUT 'DUMP-CRUFT 'MAGIC (MACRO-EXPANDER (DUMP-CRUFT PLACE . WHAT) (#[Internal-syntax
*BACKQUOTE*] (COND ((EQ? (#[Internal-syntax *COMMA*] PLACE) T) #[Internal-syntax
*COMMA*] WHAT) ((EQ? (#[Internal-syntax *COMMA*] PLACE) (QUOTE D)) (BIND
((*NOISE-OUTPUT* *NOISE-MINUS-TERMINAL*)) #[Internal-syntax *COMMA*] WHAT))
((NOT (NULL? (#[Internal-syntax *COMMA*] PLACE))) (DUMP-INTO-DEBUGGING-FILE
(CDR (#[Internal-syntax *COMMA*] PLACE)) #[Internal-syntax *COMMA*] WHAT))))))
(CPUT 'EMITFORMAT 'MAGIC (MACRO-EXPANDER (EMITFORMAT . REST) (#[Internal-syntax
*BACKQUOTE*] (IF *ENABLE-LAP-COMMENTARY?* (EMITREMARK (FORMAT NIL #[Internal-syntax
*COMMA*] REST))))))
(CPUT 'DEFINE-LAP-CONSTANT 'MAGIC (MACRO-EXPANDER (DEFINE-LAP-CONSTANT NAME
VALUE) (#[Internal-syntax *BACKQUOTE*] (BLOCK (DEFINE-CONSTANT (#[Internal-syntax
*COMMA*] (CONCATENATE-SYMBOL (QUOTE TARGET:) NAME)) (#[Internal-syntax *COMMA*]
VALUE)) (*DEFINE-LAP-CONSTANT (QUOTE (#[Internal-syntax *COMMA*] NAME))
(#[Internal-syntax *COMMA*] VALUE))))))
(CPUT 'SYSBUILD-ITEM 'MAGIC (MACRO-EXPANDER (SYSBUILD-ITEM . REST) (IGNORE
REST) (QUOTE (QUOTE FOO))))

