(herald wired)

(define-syntax (define-wired form . rest)
  `(create-wired ',form ',rest))

(define (create-wired form rest)
  (bind ((*variable-id* 0)
         (*debug-flag* nil)
         (*noise-flag* t)
         (*noise-stream* (terminal-output)))
    (let ((name (if (pair? form) (car form) form)))
      (receive (tree free-variables defined-variables new-support)
               (wired-expression->code-tree `(define-wired ,form . ,rest)
                                            *standard-syntax-table*
                                            *standard-support-env*)
        (simplify tree)
        (set (*standard-support-env* name)
             (new-support name))
        t))))

(define (wired-expression->code-tree exp syntax support)
  (receive (top-node handle)
           (alpha-top exp syntax)
    (assignment-analyze top-node)
    (complexity-analyze top-node)
    (convert top-node)
    (set (node-role top-node) 'top)
    (set (node-parent top-node) nil)
    (receive (free-variables defined-variables new-support)
             (early-bind handle support)
      (values top-node free-variables defined-variables new-support))))
