(VAXPRIMOPS ()
            ((%SET-ACCESSOR ()
                            ((PRIMOP.GENERATE SELF NODE)
                             (GENERATE-%SET-ACCESSOR NODE))
                            ((PRIMOP.ARG-SPECS SELF) '(POINTER *)))
             (MAKE-TAG-TYPE-PREDICATE (TAG)
                                      ((PRIMOP.TEST-CODE SELF NODE ARG)
                                       (EMIT VAX/CMPZV
                                             (MACHINE-NUM 0)
                                             (MACHINE-NUM 2)
                                             ARG
                                             (MACHINE-NUM (CAR (PRIMOP.ARGLIST SELF)))))
                                      ((PRIMOP.TRANSFORM SELF NODE)
                                       (TRANSFORM-PREDICATE NODE))
                                      ((PRIMOP.TYPE-PREDICATE? SELF) T))
             (LOGNOT ()
                     ((PRIMOP.GENERATE SELF NODE)
                      (RECEIVE (SOURCE TARGET)
                               (ONE-ARG-PRIMITIVE NODE)
                               (EMIT MCOM (R SOURCE) (R TARGET))
                               (MARK-CONTINUATION NODE TARGET)))
                     ((PRIMOP.ARG-SPECS SELF) '(SCRATCH)))
             (MAKE-ACCESSOR (OFFSET)
                            ((PRIMOP.GENERATE SELF NODE)
                             (GENERATE-ACCESSOR NODE (PRIMOP.SETTER SELF)))
                            ((PRIMOP.ACCESSOR SELF)
                             (LAMBDA (NODE LOC)
                                     (FIXED-ACCESSOR NODE
                                                     ((CALL-ARG 2) LOC)
                                                     (PRIMOP.SETTER SELF))))
                            ((PRIMOP.ARG-SPECS SELF) '(POINTER))
                            ((PRIMOP.SETTER SELF)
                             (FX+ -2 (CAR (PRIMOP.ARGLIST SELF)))))
             (MAKE-HEADER-TYPE-PREDICATE (HEADER)
                                         ((PRIMOP.TEST-CODE SELF NODE ARG)
                                          (EMIT VAX/CMPB
                                                ARG
                                                (MACHINE-NUM (CAR (PRIMOP.ARGLIST SELF)))))
                                         ((PRIMOP.TRANSFORM SELF NODE)
                                          (TRANSFORM-PREDICATE NODE))
                                         ((PRIMOP.TYPE-PREDICATE? SELF) T))
             (FIXNUM-DIVIDE ()
                            ((PRIMOP.GENERATE SELF NODE)
                             (RECEIVE (L AR D)
                                      (GENERATE-NON-COMM-BINOP NODE)
                                      (COND ((EQ? (REG-TYPE D) 'SCRATCH)
                                             (EMIT VAX/DIVL3 (R L) (R AR) (R D))
                                             (EMIT VAX/ASHL
                                                   (MACHINE-NUM 2)
                                                   (R D)
                                                   (R D)))
                                            (ELSE (LET ((S (GET-REGISTER 'SCRATCH
                                                                         NODE
                                                                         '*)))
                                                       (EMIT VAX/DIVL3
                                                             (R L)
                                                             (R AR)
                                                             (R S))
                                                       (EMIT VAX/ASHL
                                                             (MACHINE-NUM 2)
                                                             (R S)
                                                             (R D)))))
                                      (MARK-CONTINUATION NODE D)))
                            ((PRIMOP.ARG-SPECS SELF) '(* *))
                            ((PRIMOP.TYPE SELF NODE)
                             '(PROC (CONT NUMBER?) NUMBER? NUMBER?)))
             (MAKE-HEADER-MAKER (TAG)
                                ((PRIMOP.GENERATE SELF NODE)
                                 (RECEIVE (SOURCE TARGET)
                                          (ONE-ARG-PRIMITIVE NODE)
                                          (EMIT VAX/ASHL
                                                (MACHINE-NUM 6)
                                                (R SOURCE)
                                                (R TARGET))
                                          (EMIT VAX/MOVB
                                                (MACHINE-NUM (CAR (PRIMOP.ARG-LIST SELF)))
                                                (R TARGET))
                                          (MARK-CONTINUATION NODE TARGET)))
                                ((PRIMOP.ARG-SPECS SELF) '(SCRATCH)))
             (SIMPLE-ARITHMETIC-OP (INST1 INST2)
                                   ((PRIMOP.GENERATE SELF NODE)
                                    (RECEIVE (L AR D)
                                             (GENERATE-COMM-BINOP NODE)
                                             (IF (EQ? AR D)
                                                 (EMIT (CAR (PRIMOP.ARGLIST SELF))
                                                       (R L)
                                                       (R AR))
                                                 (EMIT (CADR (PRIMOP.ARGLIST SELF))
                                                       (R L)
                                                       (R AR)
                                                       (R D)))
                                             (MARK-CONTINUATION NODE D)))
                                   ((PRIMOP.ARG-SPECS SELF) '(* *))
                                   ((PRIMOP.TYPE SELF NODE)
                                    '(PROC (CONT NUMBER?) NUMBER? NUMBER?)))
             (MAKE-COMPARATOR (BRANCH-INST TYPE)
                              ((PRIMOP.GENERATE SELF NODE)
                               (PRIMITIVE-COMPARATOR NODE
                                                     (CAR (PRIMOP.ARGLIST SELF))))
                              ((PRIMOP.TRANSFORM SELF NODE)
                               (TRANSFORM-TO-CONDITIONAL NODE))
                              ((PRIMOP.ARG-SPECS SELF) '(* *))
                              ((PRIMOP.CONDITIONAL? SELF) T)
                              ((PRIMOP.TYPE SELF NODE)
                               '(PROC (CONT) (CONT) COMP? TOP? TOP?)))
             (MAKE-TYPE-CONVERTER (SHIFT TAG ARG-SPECS)
                                  ((PRIMOP.GENERATE SELF NODE)
                                   (LET* ((ARGS (PRIMOP.ARGS SELF))
                                          (SHIFT (CAR ARGS))
                                          (TAG (CADR ARGS)))
                                         (RECEIVE (SOURCE TARGET)
                                                  (ONE-ARG-PRIMITIVE NODE)
                                                  (IF SHIFT
                                                      (EMIT VAX/ASHL
                                                            (MACHINE-NUM SHIFT)
                                                            (R SOURCE)
                                                            (R TARGET)))
                                                  (IF TAG
                                                      (EMIT VAX/MOVB
                                                            (MACHINE-NUM TAG)
                                                            (R SOURCE)))
                                                  (GENERATE-MOVE NODE
                                                                 (R SOURCE)
                                                                 (R TARGET))
                                                  (MARK-CONTINUATION NODE
                                                                     TARGET))))
                                  ((PRIMOP.ARG-SPECS SELF)
                                   (NTH 2 (PRIMOP.ARG-LIST))))
             (FIXNUM-MULTIPLY ()
                              ((PRIMOP.GENERATE SELF NODE)
                               (RECEIVE (L AR D)
                                        (GENERATE-COMM-BINOP NODE)
                                        (COND ((EQ? (REG-TYPE D)
                                                    'SCRATCH)
                                               (EMIT VAX/ASHL
                                                     (MACHINE-NUM -2)
                                                     (R AR)
                                                     (R D))
                                               (EMIT VAX/MULL2 (R L) (R D)))
                                              (ELSE (LET ((S (GET-REGISTER 'SCRATCH
                                                                           NODE
                                                                           '*)))
                                                         (EMIT VAX/ASHL
                                                               (MACHINE-NUM -2)
                                                               (R AR)
                                                               (R S))
                                                         (EMIT VAX/MULL3
                                                               (R L)
                                                               (R S)
                                                               (R D)))))
                                        (MARK-CONTINUATION NODE D)))
                              ((PRIMOP.ARG-SPECS SELF) '(* *))
                              ((PRIMOP.TYPE SELF NODE)
                               '(PROC (CONT NUMBER?) NUMBER? NUMBER?)))
             (ASH ()
                  ((PRIMOP.GENERATE SELF NODE)
                   (RECEIVE (L AR D)
                            (GENERATE-NON-COMM-BINOP NODE)
                            (COND ((EQ? (REG-TYPE D) 'SCRATCH)
                                   (EMIT VAX/ASHL (MACHINE-NUM -2) (R L) (R D))
                                   (EMIT VAX/ASHL (R D) (R AR) (R D)))
                                  (ELSE (LET ((S (GET-REGISTER 'SCRATCH
                                                               NODE
                                                               '*)))
                                             (EMIT VAX/ASHL
                                                   (MACHINE-NUM -2)
                                                   (R L)
                                                   (R S))
                                             (EMIT VAX/ASHL (R S) (R AR) (R D)))))
                            (MARK-CONTINUATION NODE D)))
                  ((PRIMOP.ARG-SPECS SELF) '(SCRATCH POINTER))
                  ((PRIMOP.TYPE SELF NODE)
                   '(PROC (CONT NUMBER?) NUMBER? NUMBER?)))
             (%SET-AREF ()
                        ((PRIMOP.GENERATE SELF NODE) (GENERATE-%SET-AREF NODE))
                        ((PRIMOP.ARG-SPECS SELF) '(POINTER SCRATCH)))
             (CALL-XENOID ()
                          ((PRIMOP.GENERATE SELF NODE)
                           (GENERATE-CALL-XENOID NODE))
                          ((PRIMOP.ARG-SPECS SELF) NIL))
             (AREF ()
                   ((PRIMOP.GENERATE SELF NODE) (GENERATE-AREF NODE))
                   ((PRIMOP.ACCESSOR SELF)
                    (LAMBDA (NODE LOC) (AREF-ACCESSOR NODE LOC)))
                   ((PRIMOP.SETTER SELF) %SET-AREF)
                   ((PRIMOP.ARG-SPECS SELF) '(POINTER SCRATCH)))
             (BIGNUM-HEADER? ()
                             ((PRIMOP.TEST-CODE SELF NODE ARG)
                              (EMIT VAX/CMPZV
                                    (MACHINE-NUM 0)
                                    (MACHINE-NUM 7)
                                    ARG
                                    (MACHINE-NUM HEADER/BIGNUM)))
                             ((PRIMOP.TRANSFORM SELF NODE)
                              (TRANSFORM-PREDICATE NODE))
                             ((PRIMOP.TYPE-PREDICATE? SELF) T))
             (FIXNUM-SUBTRACT ()
                              ((PRIMOP.GENERATE SELF NODE)
                               (RECEIVE (L AR D)
                                        (GENERATE-NON-COMM-BINOP NODE)
                                        (IF (EQ? AR D)
                                            (EMIT VAX/SUBL2 (R L) (R AR))
                                            (EMIT VAX/SUBL3 (R L) (R AR) (R D)))
                                        (MARK-CONTINUATION NODE D)))
                              ((PRIMOP.ARG-SPECS SELF) '(* *))
                              ((PRIMOP.TYPE SELF NODE)
                               '(PROC (CONT NUMBER?) NUMBER? NUMBER?))))
            ((MAKE-TAG-TYPE-PREDICATE ()
                                      SUPPORT/WIRED
                                      (PRIMOP () MAKE-TAG-TYPE-PREDICATE))
             (HEADER/SLICE () SUPPORT/CONSTANT (LITERAL 41))
             (EXTEND? () SUPPORT/CONSTANT (PRIMOP () MAKE-TAG-TYPE-PREDICATE 2))
             (BITV-HEADER? ()
                           SUPPORT/CONSTANT
                           (PRIMOP () MAKE-HEADER-TYPE-PREDICATE 9))
             (MAKE-HEADER-MAKER () SUPPORT/WIRED (PRIMOP () MAKE-HEADER-MAKER))
             (CHAR? ()
                    SUPPORT/CONSTANT
                    (PRIMOP () MAKE-HEADER-TYPE-PREDICATE 1))
             (HEADER/CHAR () SUPPORT/CONSTANT (LITERAL 1))
             (AREF () SUPPORT/CONSTANT (PRIMOP () AREF))
             (FIXNUM-DIVIDE () SUPPORT/CONSTANT (PRIMOP () FIXNUM-DIVIDE))
             (STRING-TEXT () SUPPORT/CONSTANT (PRIMOP () MAKE-ACCESSOR 4))
             (CALL-XENOID () SUPPORT/CONSTANT (PRIMOP () CALL-XENOID))
             (TAG/IMMEDIATE () SUPPORT/CONSTANT (LITERAL 1))
             (TAG/EXTEND () SUPPORT/CONSTANT (LITERAL 2))
             (BIGNUM-HEADER? () SUPPORT/CONSTANT (PRIMOP () BIGNUM-HEADER?))
             (FIXNUM-MULTIPLY () SUPPORT/CONSTANT (PRIMOP () FIXNUM-MULTIPLY))
             (XENOID-POINTER () SUPPORT/CONSTANT (PRIMOP () MAKE-ACCESSOR 4))
             (MAKE-HEADER-TYPE-PREDICATE ()
                                         SUPPORT/WIRED
                                         (PRIMOP () MAKE-HEADER-TYPE-PREDICATE))
             (LOGNOT () SUPPORT/CONSTANT (PRIMOP () LOGNOT))
             (HEADER/SYMBOL () SUPPORT/CONSTANT (LITERAL 49))
             (HEADER/BIGNUM () SUPPORT/CONSTANT (LITERAL 37))
             (GENERAL-VECTOR-HEADER? ()
                                     SUPPORT/CONSTANT
                                     (PRIMOP () MAKE-HEADER-TYPE-PREDICATE 25))
             (FIXNUM-SUBTRACT () SUPPORT/CONSTANT (PRIMOP () FIXNUM-SUBTRACT))
             (ASH () SUPPORT/CONSTANT (PRIMOP () ASH))
             (LOGXOR ()
                     SUPPORT/CONSTANT
                     (PRIMOP () SIMPLE-ARITHMETIC-OP XORL2 XORL3))
             (EXTEND-TEMPLATE () SUPPORT/CONSTANT (PRIMOP () MAKE-ACCESSOR 0))
             (HEADER/TEXT () SUPPORT/CONSTANT (LITERAL 17))
             (%CDR-OFFSET% () SUPPORT/CONSTANT (LITERAL -3))
             (MAKE-COMPARATOR () SUPPORT/WIRED (PRIMOP () MAKE-COMPARATOR))
             (STRING-OFFSET () SUPPORT/CONSTANT (PRIMOP () MAKE-ACCESSOR 8))
             (%SET-ACCESSOR () SUPPORT/CONSTANT (PRIMOP () %SET-ACCESSOR))
             (EQ? () SUPPORT/CONSTANT (PRIMOP () MAKE-COMPARATOR JGEQ TOP?))
             (TAG/FIXNUM () SUPPORT/CONSTANT (LITERAL 0))
             (LOGIOR ()
                     SUPPORT/CONSTANT
                     (PRIMOP () SIMPLE-ARITHMETIC-OP BISL2 BISL3))
             (CDR () SUPPORT/CONSTANT (PRIMOP () MAKE-ACCESSOR -1))
             (FIXNUM-ADD ()
                         SUPPORT/CONSTANT
                         (PRIMOP () SIMPLE-ARITHMETIC-OP ADDL2 ADDL3))
             (%MAKE-SYMBOL-HEADER ()
                                  SUPPORT/CONSTANT
                                  (PRIMOP () MAKE-HEADER-MAKER 49))
             (MAKE-ACCESSOR () SUPPORT/WIRED (PRIMOP () MAKE-ACCESSOR))
             (FIXNUM? () SUPPORT/CONSTANT (PRIMOP () MAKE-TAG-TYPE-PREDICATE 0))
             (LIST? () SUPPORT/CONSTANT (PRIMOP () MAKE-TAG-TYPE-PREDICATE 3))
             (FIXNUM-LESS? ()
                           SUPPORT/CONSTANT
                           (PRIMOP () MAKE-COMPARATOR JGEQ NUMBER?))
             (%MAKE-STRING-HEADER ()
                                  SUPPORT/CONSTANT
                                  (PRIMOP () MAKE-HEADER-MAKER 41))
             (HEADER/STRING () SUPPORT/CONSTANT (LITERAL 41))
             (HEADER/GENERAL-VECTOR () SUPPORT/CONSTANT (LITERAL 25))
             (TEXT-HEADER? ()
                           SUPPORT/CONSTANT
                           (PRIMOP () MAKE-HEADER-TYPE-PREDICATE 17))
             (HEADER/BITV () SUPPORT/CONSTANT (LITERAL 9))
             (%CAR-OFFSET% () SUPPORT/CONSTANT (LITERAL 1))
             (TAG/PAIR () SUPPORT/CONSTANT (LITERAL 3))
             (ASCII->CHAR ()
                          SUPPORT/CONSTANT
                          (PRIMOP () MAKE-TYPE-CONVERTER 6 1 (*)))
             (%MAKE-TEXT-HEADER ()
                                SUPPORT/CONSTANT
                                (PRIMOP () MAKE-HEADER-MAKER 17))
             (IMMEDIATE? ()
                         SUPPORT/CONSTANT
                         (PRIMOP () MAKE-TAG-TYPE-PREDICATE 1))
             (CAR () SUPPORT/CONSTANT (PRIMOP () MAKE-ACCESSOR 3))
             (MAKE-TYPE-CONVERTER ()
                                  SUPPORT/WIRED
                                  (PRIMOP () MAKE-TYPE-CONVERTER))
             (FIXNUM-EQUAL? ()
                            SUPPORT/CONSTANT
                            (PRIMOP () MAKE-COMPARATOR JNEQ NUMBER?))
             (%SET-AREF () SUPPORT/CONSTANT (PRIMOP () %SET-AREF))
             (TEXT->SYMBOL! ()
                            SUPPORT/CONSTANT
                            (PRIMOP () MAKE-TYPE-CONVERTER () 49 (*)))
             (STRING? ()
                      SUPPORT/CONSTANT
                      (PRIMOP () MAKE-HEADER-TYPE-PREDICATE 41))
             (CHAR->ASCII ()
                          SUPPORT/CONSTANT
                          (PRIMOP () MAKE-TYPE-CONVERTER -6 () (*)))
             (SYMBOL-HEADER? ()
                             SUPPORT/CONSTANT
                             (PRIMOP () MAKE-HEADER-TYPE-PREDICATE 49))
             (SIMPLE-ARITHMETIC-OP ()
                                   SUPPORT/WIRED
                                   (PRIMOP () SIMPLE-ARITHMETIC-OP))))
