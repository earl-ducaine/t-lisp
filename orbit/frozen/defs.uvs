;;; VAX TC support file for #[Filename VULCAN ORBIT DEFS T 0]
;;; TC version 1.4 (65)

(COMMENT (SOURCE-FILENAME #[Filename VULCAN ORBIT DEFS T 0]))
(COMMENT (HERALDED-FILENAME #[Filename () () DEFS]))
(SYSBUILD-ITEM END)
(CPUT '*EMPTY* 'DEFINED T)
(CPUT 'EMPTY? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'BUG 'DEFINED (QUOTE (1 . 9999)))
(CPUT 'WARNING 'DEFINED (QUOTE (1 . 9999)))
(CPUT 'NOISE 'DEFINED (QUOTE (1 . 9999)))
(CPUT 'ORBIT-DEBUG 'DEFINED (QUOTE (0 . 9999)))
(CPUT 'VARIABLE-STYPE 'DEFINED T)
(CPUT 'MAKE-VARIABLE 'DEFINED T)
(CPUT 'VARIABLE? 'DEFINED T)
(CPUT 'HANDLE-VARIABLE 'DEFINED T)
(CPUT 'VARIABLE-NAME 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'VARIABLE-NAME 'DEFINED T)
(CPUT 'VARIABLE-NAME 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'VARIABLE-ID 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'VARIABLE-ID 'DEFINED T)
(CPUT 'VARIABLE-ID 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'VARIABLE-BINDER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'VARIABLE-BINDER 'DEFINED T)
(CPUT 'VARIABLE-BINDER 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'VARIABLE-SUPPORT-ENV 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'VARIABLE-SUPPORT-ENV 'DEFINED T)
(CPUT 'VARIABLE-SUPPORT-ENV 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'VARIABLE-NUMBER 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'VARIABLE-NUMBER 'DEFINED T)
(CPUT 'VARIABLE-NUMBER 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'VARIABLE-REFS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 7))))
(CPUT 'VARIABLE-REFS 'DEFINED T)
(CPUT 'VARIABLE-REFS 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 7 VAL))))
(CPUT 'VARIABLE-TYPE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 8))))
(CPUT 'VARIABLE-TYPE 'DEFINED T)
(CPUT 'VARIABLE-TYPE 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 8 VAL))))
(CPUT 'VARIABLE-REP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 9))))
(CPUT 'VARIABLE-REP 'DEFINED T)
(CPUT 'VARIABLE-REP 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 9 VAL))))
(CPUT 'CREATE-VARIABLE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'USED? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'OBTAIN-VARIABLE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'BIND-VARIABLES 'DEFINED (QUOTE (3 . 3)))
(CPUT 'MAKE-HANDLE 'DEFINED (QUOTE (0 . 0)))
(CPUT 'THE-FREE-VARIABLES 'DEFINED T)
(CPUT 'NODE-STYPE 'DEFINED T)
(CPUT 'MAKE-NODE 'DEFINED T)
(CPUT 'NODE? 'DEFINED T)
(CPUT 'HANDLE-NODE 'DEFINED T)
(CPUT 'NODE-VARIANT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 2))))
(CPUT 'NODE-VARIANT 'DEFINED T)
(CPUT 'NODE-VARIANT 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 2 VAL))))
(CPUT 'NODE-PARENT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 3))))
(CPUT 'NODE-PARENT 'DEFINED T)
(CPUT 'NODE-PARENT 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 3 VAL))))
(CPUT 'NODE-ROLE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 4))))
(CPUT 'NODE-ROLE 'DEFINED T)
(CPUT 'NODE-ROLE 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 4 VAL))))
(CPUT 'NODE-SIMPLIFIED? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 5))))
(CPUT 'NODE-SIMPLIFIED? 'DEFINED T)
(CPUT 'NODE-SIMPLIFIED? 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 5 VAL))))
(CPUT 'NODE-CHILDREN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 6))))
(CPUT 'NODE-CHILDREN 'DEFINED T)
(CPUT 'NODE-CHILDREN 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 6 VAL))))
(CPUT 'NODE-INSTRUCTIONS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 7))))
(CPUT 'NODE-INSTRUCTIONS 'DEFINED T)
(CPUT 'NODE-INSTRUCTIONS 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 7 VAL))))
(CPUT 'NODE-STUFF-1 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 8))))
(CPUT 'NODE-STUFF-1 'DEFINED T)
(CPUT 'NODE-STUFF-1 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 8 VAL))))
(CPUT 'NODE-STUFF-2 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 9))))
(CPUT 'NODE-STUFF-2 'DEFINED T)
(CPUT 'NODE-STUFF-2 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 9 VAL))))
(CPUT 'NODE-STUFF-3 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 10))))
(CPUT 'NODE-STUFF-3 'DEFINED T)
(CPUT 'NODE-STUFF-3 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 10 VAL))))
(CPUT 'NODE-STUFF-4 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 11))))
(CPUT 'NODE-STUFF-4 'DEFINED T)
(CPUT 'NODE-STUFF-4 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 11 VAL))))
(CPUT 'NODE-STUFF-5 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EXTEND-ELT-FIXED
OBJ 12))))
(CPUT 'NODE-STUFF-5 'DEFINED T)
(CPUT 'NODE-STUFF-5 'SETTER (QUOTE (#[Syntax LAMBDA] (OBJ VAL) (SET-EXTEND-ELT-FIXED
OBJ 12 VAL))))
(CPUT 'CREATE-NODE-VARIANT 'DEFINED (QUOTE (1 . 1)))
(CPUT 'PRINT-NODE 'DEFINED T)
(CPUT 'CREATE-NODE 'DEFINED T)
(CPUT '*NODE-VARIANTS* 'DEFINED T)
(CPUT 'NODE-FIELD 'DEFINED (QUOTE (3 . 3)))
(CPUT 'MAKE-RELATION 'DEFINED (QUOTE (4 . 4)))
(CPUT 'RELATE 'DEFINED T)
(CPUT 'RELATION-INDEX 'DEFINED T)
(CPUT 'DETACH 'DEFINED (QUOTE (1 . 1)))
(CPUT 'MOVE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'REPLACE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'MARK-CHANGED 'DEFINED (QUOTE (1 . 1)))
(CPUT 'PROCLAIM-EMPTY 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LITERAL? 'DEFINED T)
(CPUT 'LEAF-NODE? 'DEFINED T)
(CPUT 'LEAF-VALUE 'DEFINED T)
(CPUT 'LEAF-VARIANT 'DEFINED T)
(CPUT 'LEAF-VIA 'DEFINED T)
(CPUT 'LEAF-SOURCE 'DEFINED T)
(CPUT 'CREATE-LEAF-NODE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'CREATE-PRIMOP-NODE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'PRIMOP-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'PRIMOP-REF? 'DEFINED (QUOTE (2 . 2)))
(CPUT 'PRIMOP-VALUE 'DEFINED T)
(CPUT 'CREATE-LITERAL-NODE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LITERAL-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LITERAL-VALUE 'DEFINED T)
(CPUT 'CREATE-REFERENCE-NODE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'REFERENCE-NODE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'REFERENCE-VARIABLE 'DEFINED T)
(CPUT 'REFERENCE-COPY-SOURCES 'DEFINED T)
(CPUT 'LAMBDA-NODE? 'DEFINED T)
(CPUT 'LAMBDA-ALL-VARIABLES 'DEFINED T)
(CPUT 'LAMBDA-ENV 'DEFINED T)
(CPUT 'LAMBDA-STRATEGY 'DEFINED T)
(CPUT 'LAMBDA-LIVE 'DEFINED T)
(CPUT 'LAMBDA-TEMPS 'DEFINED T)
(CPUT 'LAMBDA-BODY 'DEFINED T)
(CPUT 'LAMBDA-VARIABLES 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LAMBDA-REST+VARIABLES 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LAMBDA-SELF-VAR 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LAMBDA-REST-VAR 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LAMBDA-CONT-VAR 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CREATE-LAMBDA-NODE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'CALL-NODE? 'DEFINED T)
(CPUT 'CALL-EXITS 'DEFINED T)
(CPUT 'CALL-COMPLEXITY 'DEFINED T)
(CPUT 'CALL-PROC+ARGS 'INTEGRABLE-FUNCTION (QUOTE NODE-CHILDREN))
(CPUT 'CALL-PROC+ARGS 'DEFINED T)
(CPUT 'CALL-ARGS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (NODE) (CDR (NODE-CHILDREN
NODE)))))
(CPUT 'CALL-ARGS 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CALL-EXIT-ARGS 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CALL-NON-EXIT-ARGS 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CALL-ARG? 'DEFINED T)
(CPUT 'MAKE-ARG-RELATION 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CALL-ARG-NUMBER 'DEFINED T)
(CPUT '*CALL-ARG-RELATIONS* 'DEFINED T)
(CPUT 'CALL-PROC 'DEFINED T)
(CPUT 'CALL-ARG 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CALL-EXIT? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'RELATE-CALL-PROC+ARGS 'DEFINED (QUOTE (2 . 2)))
(CPUT 'RELATE-CALL-ARGS 'DEFINED (QUOTE (2 . 2)))
(CPUT 'REPLACE-CALL-ARGS 'DEFINED (QUOTE (2 . 2)))
(CPUT 'RELATE-SHORTER-CALL-ARGS 'DEFINED (QUOTE (2 . 2)))
(CPUT 'CREATE-CALL-NODE 'DEFINED (QUOTE (2 . 2)))

