;;; VAX TC support file for #[Filename VULCAN TSYS OPEN T 0]
;;; TC version 1.4 (65)

(COMMENT (SOURCE-FILENAME #[Filename VULCAN TSYS OPEN T 0]))
(COMMENT (HERALDED-FILENAME #[Filename () TSYS OPEN T 108]))
(SYSBUILD-ITEM END)
(CPUT 'NIL 'CONSTANT NIL)
(CPUT 'NIL 'DEFINED T)
(CPUT 'T 'CONSTANT T)
(CPUT 'T 'DEFINED T)
(CPUT 'ELSE 'CONSTANT (QUOTE ELSE))
(CPUT 'ELSE 'DEFINED T)
(CPUT '*NULL-CHAR* 'CONSTANT (QUOTE #\NULL))
(CPUT '*NULL-CHAR* 'DEFINED T)
(CPUT '*NUMBER-OF-CHAR-CODES* 'CONSTANT (QUOTE 256))
(CPUT '*NUMBER-OF-CHAR-CODES* 'DEFINED T)
(CPUT '*STRING-LENGTH-LIMIT* 'CONSTANT (QUOTE 32767))
(CPUT '*STRING-LENGTH-LIMIT* 'DEFINED T)
(CPUT 'NOT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF X (QUOTE ()) (QUOTE
T)))))
(CPUT 'NOT 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FALSE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF X (QUOTE ()) (QUOTE
T)))))
(CPUT 'FALSE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'TRUE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF X (QUOTE T) (QUOTE
())))))
(CPUT 'TRUE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'BOOLEAN? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (OR-AUX (EQ? X (QUOTE
T)) (LAMBDA () (EQ? X (QUOTE ())))))))
(CPUT 'BOOLEAN? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'ALWAYS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (K) (LAMBDA IGNORED K))))
(CPUT 'ALWAYS 'DEFINED (QUOTE (1 . 1)))
(CPUT 'PROJ0 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X . IGNORED) X)))
(CPUT 'PROJ0 'DEFINED (QUOTE (1 . 9999)))
(CPUT 'PROJ1 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (() Y . IGNORED) Y)))
(CPUT 'PROJ1 'DEFINED (QUOTE (2 . 9999)))
(CPUT 'PROJ2 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (() () Z . IGNORED) Z)))
(CPUT 'PROJ2 'DEFINED (QUOTE (3 . 9999)))
(CPUT 'PROJ3 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (() () () W . IGNORED)
W)))
(CPUT 'PROJ3 'DEFINED (QUOTE (4 . 9999)))
(CPUT 'PROJN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (N) (LAMBDA ARGLIST (NTH
ARGLIST N)))))
(CPUT 'PROJN 'DEFINED (QUOTE (1 . 1)))
(CPUT 'IDENTITY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) X)))
(CPUT 'IDENTITY 'DEFINED (QUOTE (1 . 1)))
(CPUT 'COND-=>-AUX 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (P F A) (IF P ((F)
P) (A)))))
(CPUT 'COND-=>-AUX 'DEFINED (QUOTE (3 . 3)))
(CPUT 'OR-AUX 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (P R) (IF P P (R)))))
(CPUT 'OR-AUX 'DEFINED (QUOTE (2 . 2)))
(CPUT 'PROCLAIM 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (() OBJ) OBJ)))
(CPUT 'PROCLAIM 'DEFINED (QUOTE (2 . 2)))
(CPUT 'NULL? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF X (QUOTE ()) (QUOTE
T)))))
(CPUT 'NULL? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'ATOM? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (PAIR? X) (QUOTE
()) (QUOTE T)))))
(CPUT 'ATOM? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'LIST? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF X (PAIR? X) (QUOTE
T)))))
(CPUT 'LIST? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NULL-LIST? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF X (IF (PAIR?
X) (QUOTE ()) (LOSING-NON-NULL-LIST X)) (QUOTE T)))))
(CPUT 'NULL-LIST? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NONNEGATIVE-FIXNUM? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (FIXNUM?
X) (FIXNUM-NOT-NEGATIVE? X) (QUOTE ())))))
(CPUT 'NONNEGATIVE-FIXNUM? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'EOF? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (EQ? X *EOF*))))
(CPUT 'EOF? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NEWLINE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (C) (EQ? C (QUOTE #\NEWLINE)))))
(CPUT 'NEWLINE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'VCELL? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) *VCELL-TEMPLATE*) (QUOTE ())))))
(CPUT 'VCELL? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'SYMBOL? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) (SYMBOL-TEMPLATE)) (QUOTE ())))))
(CPUT 'SYMBOL? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'VECTOR? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) (VECTOR-TEMPLATE)) (QUOTE ())))))
(CPUT 'VECTOR? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'BITV? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) *BITV-TEMPLATE*) (QUOTE ())))))
(CPUT 'BITV? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'BYTEV? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) *BYTEV-TEMPLATE*) (QUOTE ())))))
(CPUT 'BYTEV? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'ESCAPE-PROCEDURE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND?
X) (EQ? (EXTEND-TEMPLATE X) *ESCAPE-PROCEDURE-TEMPLATE*) (QUOTE ())))))
(CPUT 'ESCAPE-PROCEDURE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'UNIT? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) *UNIT-TEMPLATE*) (QUOTE ())))))
(CPUT 'UNIT? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'XENOID? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND? X) (EQ?
(EXTEND-TEMPLATE X) *XENOID-TEMPLATE*) (QUOTE ())))))
(CPUT 'XENOID? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'BOGUS-ENTITY? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (EXTEND?
X) (EQ? (EXTEND-TEMPLATE X) *BOGUS-ENTITY-TEMPLATE*) (QUOTE ())))))
(CPUT 'BOGUS-ENTITY? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'SET-VECTOR-ELT 'INTEGRABLE-FUNCTION (QUOTE SET-EXTEND-ELT))
(CPUT 'SET-VECTOR-ELT 'DEFINED T)
(CPUT 'VECTOR-ELT 'INTEGRABLE-FUNCTION (QUOTE EXTEND-ELT))
(CPUT 'VECTOR-ELT 'DEFINED T)
(CPUT 'MEM? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (PRED OBJ LIST) (IF (MEM
PRED OBJ LIST) (QUOTE T) (QUOTE ())))))
(CPUT 'MEM? 'DEFINED (QUOTE (3 . 3)))
(CPUT 'MEMQ 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ LIST) (MEM EQ? OBJ
LIST))))
(CPUT 'MEMQ 'DEFINED (QUOTE (2 . 2)))
(CPUT 'MEMQ? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ LIST) (IF (MEM EQ?
OBJ LIST) (QUOTE T) (QUOTE ())))))
(CPUT 'MEMQ? 'DEFINED (QUOTE (2 . 2)))
(CPUT 'NON-EMPTY-STRING? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (STRING?
X) (IF (STRING-EMPTY? X) (QUOTE ()) (QUOTE T)) (QUOTE ())))))
(CPUT 'NON-EMPTY-STRING? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CHAR? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (MISC? X) (POINTER-LESS?
X 256) (QUOTE ())))))
(CPUT 'CHAR? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CHAR->ASCII 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (C) (POINTER-ADDRESS
C))))
(CPUT 'CHAR->ASCII 'DEFINED (QUOTE (1 . 1)))
(CPUT 'ASCII->CHAR 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (C) (MAKE-POINTER
C 7))))
(CPUT 'ASCII->CHAR 'DEFINED (QUOTE (1 . 1)))
(CPUT 'STRING-TAIL 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (S) (STRING-TAIL!
(CHOPY S)))))
(CPUT 'STRING-TAIL 'DEFINED (QUOTE (1 . 1)))
(CPUT 'STRING-NTHTAIL 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (S N) (STRING-NTHTAIL!
(CHOPY S) N))))
(CPUT 'STRING-NTHTAIL 'DEFINED (QUOTE (2 . 2)))
(CPUT 'ENV-LOOKUP 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (ENV IDENTIFIER LOCAL?
CREATE?) (ENV IDENTIFIER LOCAL? CREATE?))))
(CPUT 'ENV-LOOKUP 'DEFINED (QUOTE (4 . 4)))
(CPUT 'VALUE->NONVALUE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (POINTER-ADD
X *NONVALUE-HACK*))))
(CPUT 'VALUE->NONVALUE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NONVALUE->VALUE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (POINTER-SUBTRACT
X *NONVALUE-HACK*))))
(CPUT 'NONVALUE->VALUE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NONVALUE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (MISC? X) (POINTER-GREATER?
X *NONVALUE-HACK*) (QUOTE ())))))
(CPUT 'NONVALUE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'VCELL-NONVALUE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (VCELL) (POINTER-SUBTRACT
(VCELL-CONTENTS VCELL) *NONVALUE-HACK*))))
(CPUT 'VCELL-NONVALUE 'DEFINED T)
(CPUT 'SET-VCELL-NONVALUE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (VCELL X)
(LET ((SET.32 (POINTER-ADD X *NONVALUE-HACK*))) (BLOCK (SET-VCELL-CONTENTS
VCELL SET.32) SET.32)))))
(CPUT 'SET-VCELL-NONVALUE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'VCELL-NONVALUE 'SETTER (QUOTE SET-VCELL-NONVALUE))
(CPUT 'VCELL-HAS-VALUE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (VCELL) (LET
((X.33 (VCELL-CONTENTS VCELL))) (LET ((IFALT.35 (LAMBDA () (QUOTE T))))
(IF (MISC? X.33) (IF (POINTER-GREATER? X.33 *NONVALUE-HACK*) (QUOTE ())
(IFALT.35)) (IFALT.35)))))))
(CPUT 'VCELL-HAS-VALUE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-ABS 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (N) (IF (FIXNUM-LESS?
N 0) (FIXNUM-NEGATE N) N))))
(CPUT 'FIXNUM-ABS 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-MIN 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X Y) (IF (FIXNUM-LESS?
X Y) X Y))))
(CPUT 'FIXNUM-MIN 'DEFINED (QUOTE (2 . 2)))
(CPUT 'FIXNUM-MAX 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X Y) (IF (FIXNUM-GREATER?
X Y) X Y))))
(CPUT 'FIXNUM-MAX 'DEFINED (QUOTE (2 . 2)))
(CPUT 'FIXNUM-POSITIVE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-GREATER?
X 0))))
(CPUT 'FIXNUM-POSITIVE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-NEGATIVE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-LESS?
X 0))))
(CPUT 'FIXNUM-NEGATIVE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-ZERO? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-EQUAL?
X 0))))
(CPUT 'FIXNUM-ZERO? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-NOT-POSITIVE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-NOT-GREATER?
X 0))))
(CPUT 'FIXNUM-NOT-POSITIVE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-NOT-NEGATIVE? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-NOT-LESS?
X 0))))
(CPUT 'FIXNUM-NOT-NEGATIVE? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-NOT-ZERO? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-NOT-EQUAL?
X 0))))
(CPUT 'FIXNUM-NOT-ZERO? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-ADD1 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (FIXNUM-ADD X
1))))
(CPUT 'FIXNUM-ADD1 'DEFINED (QUOTE (1 . 1)))
(CPUT 'FIXNUM-EVEN? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (X) (IF (FIXNUM-ODD?
X) (QUOTE ()) (QUOTE T)))))
(CPUT 'FIXNUM-EVEN? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'CHANGE-TAG 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ FROM-TAG TO-TAG)
(POINTER-ADD OBJ (FIXNUM->POINTER (FIXNUM-SUBTRACT TO-TAG FROM-TAG))))))
(CPUT 'CHANGE-TAG 'DEFINED (QUOTE (3 . 3)))
(CPUT 'BUFFER-SIZE 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (BUFFER) (TEXT-LENGTH
(STRING-POINTER BUFFER)))))
(CPUT 'BUFFER-SIZE 'DEFINED (QUOTE (1 . 1)))
(CPUT '%VECTOR-REPLACE 'INTEGRABLE-FUNCTION (QUOTE COPY-MEM))
(CPUT '%VECTOR-REPLACE 'DEFINED T)

