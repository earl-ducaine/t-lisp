;;; VAX TC support file for #[Filename VULCAN TSYS GC T 0]
;;; TC version 1.4 (64)

(COMMENT (SOURCE-FILENAME #[Filename VULCAN TSYS GC T 0]))
(COMMENT (HERALDED-FILENAME #[Filename () TSYS GC T 236]))
(CPUT 'OLDSPACE-CONTAINS? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (IF
(POINTER-GREATER? OBJ *OLDSPACE-LOW*) (POINTER-LESS? OBJ *OLDSPACE-HIGH*)
(QUOTE ())))))
(CPUT 'OLDSPACE-CONTAINS? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NEWSPACE-CONTAINS? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (IF
(POINTER-GREATER? OBJ *HEAP-BEGIN*) (POINTER-LESS? OBJ (HEAP-POINTER)) (QUOTE
())))))
(CPUT 'NEWSPACE-CONTAINS? 'DEFINED (QUOTE (1 . 1)))
(CPUT '*GC-DEBUG?* 'DEFINED T)
(CPUT 'GC-ROOT 'DEFINED (QUOTE (0 . 0)))
(CPUT 'GC-TRACE-THE-INITIAL-UNITS 'DEFINED (QUOTE (0 . 0)))
(CPUT 'GC-TRACE-THE-INITIAL-SYMBOLS 'DEFINED (QUOTE (0 . 0)))
(CPUT 'GC-TRACE-STACK 'DEFINED (QUOTE (1 . 1)))
(CPUT 'NOTE-GC-COPY 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (FROM TO) (IF *GC-NOISILY?*
(IF (FIXNUM-NOT-LESS? (LET ((SET.24 (FIXNUM-ADD *GC-COPY-TICK* 1))) (BLOCK
(SET *GC-COPY-TICK* SET.24) SET.24)) *GC-NOTE-FREQUENCY*) (NOTE-GC-COPY-1
FROM TO) 0) 0))))
(CPUT 'NOTE-GC-COPY 'DEFINED T)
(CPUT 'NOTE-GC-COPY-1 'DEFINED (QUOTE (2 . 2)))
(CPUT 'NOTE-GC-REPEAT 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (()) (IF *GC-NOISILY?*
(LET ((SET.27 (FIXNUM-ADD *GC-REPEAT-COUNT* 1))) (BLOCK (SET *GC-REPEAT-COUNT*
SET.27) SET.27)) 0))))
(CPUT 'NOTE-GC-REPEAT 'DEFINED T)
(CPUT 'GC-LOSER 'DEFINED (QUOTE (3 . 3)))
(CPUT 'FLONUM-FORWARDED? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (EQ?
(FLONUM-LOW-PESO OBJ) (FIXNUM->POINTER *FLONUM-FORWARD-MARKER*)))))
(CPUT 'FLONUM-FORWARDED? 'DEFINED T)
(CPUT 'FLONUM-FORWARDED 'INTEGRABLE-FUNCTION (QUOTE FLONUM-HIGH-PESO))
(CPUT 'FLONUM-FORWARDED 'DEFINED T)
(CPUT 'SET-FLONUM-FORWARDED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ NEW-OBJ)
(BLOCK (SET-FLONUM-HIGH-PESO OBJ NEW-OBJ) (LET ((SET.32 (FIXNUM->POINTER
*FLONUM-FORWARD-MARKER*))) (BLOCK (SET-FLONUM-LOW-PESO OBJ SET.32) SET.32))))))
(CPUT 'SET-FLONUM-FORWARDED 'DEFINED T)
(CPUT 'PAIR-FORWARDED-CAR? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (A) (IF (PAIR?
A) (IF (POINTER-GREATER? A *HEAP-BEGIN*) (POINTER-LESS? A (HEAP-POINTER))
(QUOTE ())) (QUOTE ())))))
(CPUT 'PAIR-FORWARDED-CAR? 'DEFINED T)
(CPUT 'PAIR-FORWARDED? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (LET ((A
(CAR OBJ))) (IF (PAIR? A) (IF (POINTER-GREATER? A *HEAP-BEGIN*) (POINTER-LESS?
A (HEAP-POINTER)) (QUOTE ())) (QUOTE ()))))))
(CPUT 'PAIR-FORWARDED? 'DEFINED T)
(CPUT 'SET-PAIR-FORWARDED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ NEW-OBJ)
(BLOCK (SET-CAR OBJ NEW-OBJ) NEW-OBJ))))
(CPUT 'SET-PAIR-FORWARDED 'DEFINED T)
(CPUT 'GC-COPY-PAIR 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (LOC OBJ) (LET ((A
(CAR OBJ))) (LET ((IFALT.38 (LAMBDA () (BLOCK (LET ((SET.35 (FIXNUM-ADD
*GC-PAIR-COUNT* 1))) (BLOCK (SET *GC-PAIR-COUNT* SET.35) SET.35)) (LET ((NEW-OBJ
(NEW-CELL))) (BLOCK (IF *GC-NOISILY?* (IF (FIXNUM-NOT-LESS? (LET ((SET.24
(FIXNUM-ADD *GC-COPY-TICK* 1))) (BLOCK (SET *GC-COPY-TICK* SET.24) SET.24))
*GC-NOTE-FREQUENCY*) (NOTE-GC-COPY-1 OBJ NEW-OBJ) 0) 0) (%SET-LOC-CONTENTS
LOC NEW-OBJ) (SET-CAR OBJ NEW-OBJ) (GC-COPY (%LOC CDR NEW-OBJ) (CDR OBJ))
(GC-COPY (%LOC CAR NEW-OBJ) A))))))) (IF (PAIR? A) (IF (POINTER-GREATER?
A *HEAP-BEGIN*) (IF (POINTER-LESS? A (HEAP-POINTER)) (BLOCK (%SET-LOC-CONTENTS
LOC A) (IF *GC-NOISILY?* (LET ((SET.27.41 (FIXNUM-ADD *GC-REPEAT-COUNT*
1))) (BLOCK (SET *GC-REPEAT-COUNT* SET.27.41) SET.27.41)) 0)) (IFALT.38))
(IFALT.38)) (IFALT.38)))))))
(CPUT 'GC-COPY-PAIR 'DEFINED T)
(CPUT 'TEMPLATE-FORWARDED? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (TEM) (FIXNUM-EQUAL?
(TEMPLATE-LOW-BYTE TEM) 254))))
(CPUT 'TEMPLATE-FORWARDED? 'DEFINED T)
(CPUT 'TEMPLATE-FORWARDED 'INTEGRABLE-FUNCTION (QUOTE TEMPLATE-CHUNK))
(CPUT 'TEMPLATE-FORWARDED 'DEFINED T)
(CPUT 'SET-TEMPLATE-FORWARDED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (TEM NEW-TEM)
(BLOCK (SET-TEMPLATE-LOW-BYTE TEM 254) (SET-TEMPLATE-CHUNK TEM NEW-TEM)))))
(CPUT 'SET-TEMPLATE-FORWARDED 'DEFINED T)
(CPUT 'GC-COPY-TEMPLATE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'EXTEND-FORWARDED? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ) (LET
((OBJ (EXTEND-TEMPLATE OBJ))) (IF (POINTER-GREATER? OBJ *HEAP-BEGIN*) (POINTER-LESS?
OBJ (HEAP-POINTER)) (QUOTE ()))))))
(CPUT 'EXTEND-FORWARDED? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'SET-EXTEND-FORWARDED 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ NEW-OBJ)
(BLOCK (SET-EXTEND-TEMPLATE OBJ NEW-OBJ) NEW-OBJ))))
(CPUT 'SET-EXTEND-FORWARDED 'DEFINED (QUOTE (2 . 2)))
(CPUT 'GC-COPY-EXTEND 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (LOC OBJ) (LET
((TEM (EXTEND-TEMPLATE OBJ))) (LET ((SELECT.51 (POINTER-TAG TEM))) (IF (EQ?
SELECT.51 4) (BLOCK (IF *GC-NOISILY?* (LET ((SET.27 (FIXNUM-ADD *GC-REPEAT-COUNT*
1))) (BLOCK (SET *GC-REPEAT-COUNT* SET.27) SET.27)) 0) (%SET-LOC-CONTENTS
LOC TEM)) (IF (EQ? SELECT.51 1) (LET ((IFALT.54 (LAMBDA () (GC-COPY-EXTEND-1
LOC OBJ TEM)))) (IF (POINTER-GREATER? TEM *OLDSPACE-LOW*) (IF (POINTER-LESS?
TEM *OLDSPACE-HIGH*) (IF (FIXNUM-EQUAL? (TEMPLATE-LOW-BYTE TEM) 254) (GC-COPY-EXTEND-1
LOC OBJ (TEMPLATE-CHUNK TEM)) (LET ((NEW-UNIT.55 (GC-MOVE-UNIT (TEMPLATE-UNIT
TEM)))) (LET ((TEM.56 (EXTEND-TEMPLATE OBJ))) (IF (EXTEND? TEM.56) (BLOCK
(%SET-LOC-CONTENTS LOC TEM.56) (GC-TRACE-UNIT NEW-UNIT.55)) (BLOCK (GC-COPY-EXTEND-1
LOC OBJ (TEMPLATE-CHUNK TEM.56)) (GC-TRACE-UNIT NEW-UNIT.55)))))) (IFALT.54))
(IFALT.54))) (GC-LOSER LOC OBJ (QUOTE "extend with horrible template")))))))))
(CPUT 'GC-COPY-EXTEND 'DEFINED T)
(CPUT 'GC-COPY-EXTEND-1 'DEFINED (QUOTE (3 . 3)))
(CPUT 'GC-TRACE-EXTEND 'DEFINED (QUOTE (2 . 2)))
(CPUT 'GC-COPY 'DEFINED (QUOTE (2 . 2)))
(CPUT 'ALIVE-AFTER-GC? 'DEFINED (QUOTE (1 . 1)))
(CPUT 'GC-COPY-VECTOR 'DEFINED (QUOTE (2 . 2)))
(CPUT 'GC-COPY-BYTEV 'DEFINED (QUOTE (2 . 2)))
(CPUT 'GC-COPY-STRUCTURE 'DEFINED (QUOTE (2 . 2)))
(CPUT 'GC-COPY-UNIT 'DEFINED (QUOTE (2 . 2)))
(CPUT 'GC-MOVE-UNIT 'DEFINED (QUOTE (1 . 1)))
(CPUT 'SET-UNIT-FORWARDED 'DEFINED (QUOTE (2 . 2)))
(CPUT 'INTERNAL-TO-UNIT? 'INTEGRABLE-FUNCTION (QUOTE (LAMBDA (OBJ UNIT SIZE)
(IF (POINTER-NOT-LESS? OBJ UNIT) (POINTER-NOT-GREATER? OBJ (POINTER-ADD
UNIT (POINTER-ASH SIZE -1))) (QUOTE ())))))
(CPUT 'INTERNAL-TO-UNIT? 'DEFINED (QUOTE (3 . 3)))
(CPUT 'ACTUAL-CODE-SIZE 'DEFINED (QUOTE (1 . 1)))
(CPUT 'COPY-UNIT 'DEFINED (QUOTE (1 . 1)))
(CPUT 'GC-TRACE-UNIT 'DEFINED (QUOTE (1 . 1)))
(CPUT 'GC-TRACE-UNIT-1 'DEFINED (QUOTE (2 . 2)))
(SYSBUILD-ITEM STATIC OLDSPACE-CONTAINS? DEF)
(SYSBUILD-ITEM STATIC *OLDSPACE-LOW* REF)
(SYSBUILD-ITEM STATIC *OLDSPACE-HIGH* REF)
(SYSBUILD-ITEM STATIC NEWSPACE-CONTAINS? DEF)
(SYSBUILD-ITEM STATIC *HEAP-BEGIN* REF)
(SYSBUILD-ITEM STATIC GC-ROOT DEF)
(SYSBUILD-ITEM STATIC *REALLY-DOING-GC?* LSET)
(SYSBUILD-ITEM STATIC GC-TRACE-THE-INITIAL-UNITS DEF)
(SYSBUILD-ITEM STATIC GC-TRACE-THE-INITIAL-SYMBOLS DEF)
(SYSBUILD-ITEM STATIC GC-TRACE-STACK DEF)
(SYSBUILD-ITEM STATIC *THE-INITIAL-UNITS* REF)
(SYSBUILD-ITEM STATIC GC-COPY DEF)
(SYSBUILD-ITEM STATIC *GC-DEBUG?* DEF)
(SYSBUILD-ITEM STATIC GC-OUTPUT REF)
(SYSBUILD-ITEM STATIC GC-FORMAT REF)
(SYSBUILD-ITEM STATIC GC-TRACE-UNIT-1 DEF)
(SYSBUILD-ITEM STATIC *THE-INITIAL-SYMBOLS* REF)
(SYSBUILD-ITEM STATIC *OLDSPACE-LOW* REF)
(SYSBUILD-ITEM STATIC GC-TRACE-EXTEND DEF)
(SYSBUILD-ITEM STATIC *OLDSPACE-HIGH* REF)
(SYSBUILD-ITEM STATIC GET-PROC-NAME REF)
(SYSBUILD-ITEM STATIC TEMPLATE-SUPERIOR-TEMPLATE REF)
(SYSBUILD-ITEM STATIC ZERROR REF)
(SYSBUILD-ITEM STATIC FRAME-SIZE REF)
(SYSBUILD-ITEM STATIC *STACK-BASE-TEMPLATE* REF)
(SYSBUILD-ITEM STATIC *FAULT-FRAME-TEMPLATE* REF)
(SYSBUILD-ITEM STATIC *DISPATCH-RET-TEMPLATE* REF)
(SYSBUILD-ITEM STATIC *GC-FRAME-LOSSAGE?* SETQ)
(SYSBUILD-ITEM STATIC VFRAME-SIZE REF)
(SYSBUILD-ITEM STATIC VFRAME-PREVIOUS REF)
(SYSBUILD-ITEM STATIC *GC-FAULT-FRAME-LOSSAGE?* SETQ)
(SYSBUILD-ITEM STATIC FAULT-FRAME-PREVIOUS REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY-1 DEF)
(SYSBUILD-ITEM STATIC *GC-COPY-COUNT* SETQ)
(SYSBUILD-ITEM STATIC *GC-COPY-TICK* SETQ)
(SYSBUILD-ITEM STATIC GC-LOSER DEF)
(SYSBUILD-ITEM STATIC *GC-LOSER-COUNT* SETQ)
(SYSBUILD-ITEM STATIC *GC-LOSER* SETQ)
(SYSBUILD-ITEM STATIC *GC-LOSER-LOC* SETQ)
(SYSBUILD-ITEM STATIC *GC-LOSER-BREAK?* LSET)
(SYSBUILD-ITEM STATIC GC-COPY-TEMPLATE DEF)
(SYSBUILD-ITEM STATIC TEMPLATE-UNIT REF)
(SYSBUILD-ITEM STATIC *UNIT-TEMPLATE* REF)
(SYSBUILD-ITEM STATIC GC-MOVE-UNIT DEF)
(SYSBUILD-ITEM STATIC GC-TRACE-UNIT DEF)
(SYSBUILD-ITEM STATIC EXTEND-FORWARDED? DEF)
(SYSBUILD-ITEM STATIC *HEAP-BEGIN* REF)
(SYSBUILD-ITEM STATIC SET-EXTEND-FORWARDED DEF)
(SYSBUILD-ITEM STATIC GC-COPY-EXTEND-1 DEF)
(SYSBUILD-ITEM STATIC *GC-NONSTANDARD-COUNT* SETQ)
(SYSBUILD-ITEM STATIC TEMPLATE-GC-METHOD REF)
(SYSBUILD-ITEM STATIC *GC-EXTEND-COUNT* SETQ)
(SYSBUILD-ITEM STATIC COPY-EXTEND REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* REF)
(SYSBUILD-ITEM STATIC *GC-COPY-TICK* SETQ)
(SYSBUILD-ITEM STATIC *GC-NOTE-FREQUENCY* REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY-1 REF)
(SYSBUILD-ITEM STATIC *OLDSPACE-LOW* REF)
(SYSBUILD-ITEM STATIC *OLDSPACE-HIGH* REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* REF)
(SYSBUILD-ITEM STATIC *GC-REPEAT-COUNT* SETQ)
(SYSBUILD-ITEM STATIC *OLDSPACE-LOW* REF)
(SYSBUILD-ITEM STATIC *OLDSPACE-HIGH* REF)
(SYSBUILD-ITEM STATIC TEMPLATE-UNIT REF)
(SYSBUILD-ITEM STATIC GC-MOVE-UNIT REF)
(SYSBUILD-ITEM STATIC GC-COPY-EXTEND-1 REF)
(SYSBUILD-ITEM STATIC GC-TRACE-UNIT REF)
(SYSBUILD-ITEM STATIC GC-LOSER REF)
(SYSBUILD-ITEM STATIC *HEAP-BEGIN* REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* REF)
(SYSBUILD-ITEM STATIC *GC-REPEAT-COUNT* SETQ)
(SYSBUILD-ITEM STATIC *GC-PAIR-COUNT* SETQ)
(SYSBUILD-ITEM STATIC *GC-COPY-TICK* SETQ)
(SYSBUILD-ITEM STATIC *GC-NOTE-FREQUENCY* REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY-1 REF)
(SYSBUILD-ITEM STATIC GC-COPY REF)
(SYSBUILD-ITEM STATIC GC-COPY-FLONUM REF)
(SYSBUILD-ITEM STATIC GC-COPY-STRING REF)
(SYSBUILD-ITEM STATIC *NONVALUE-HACK* REF)
(SYSBUILD-ITEM STATIC *NONVALUE-HACK* REF)
(SYSBUILD-ITEM STATIC *NONVALUE-HACK* REF)
(SYSBUILD-ITEM STATIC ALIVE-AFTER-GC? DEF)
(SYSBUILD-ITEM STATIC *OLDSPACE-LOW* REF)
(SYSBUILD-ITEM STATIC *OLDSPACE-HIGH* REF)
(SYSBUILD-ITEM STATIC *HEAP-BEGIN* REF)
(SYSBUILD-ITEM STATIC *HEAP-BEGIN* REF)
(SYSBUILD-ITEM STATIC *FLONUM-FORWARD-MARKER* REF)
(SYSBUILD-ITEM STATIC STRING-FORWARDED? REF)
(SYSBUILD-ITEM STATIC *NONVALUE-HACK* REF)
(SYSBUILD-ITEM STATIC *NONVALUE-HACK* REF)
(SYSBUILD-ITEM STATIC GC-COPY-VECTOR DEF)
(SYSBUILD-ITEM STATIC %COPY-VECTOR REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* REF)
(SYSBUILD-ITEM STATIC *GC-COPY-TICK* SETQ)
(SYSBUILD-ITEM STATIC *GC-NOTE-FREQUENCY* REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY-1 REF)
(SYSBUILD-ITEM STATIC GC-COPY-BYTEV DEF)
(SYSBUILD-ITEM STATIC %COPY-BYTEV REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* REF)
(SYSBUILD-ITEM STATIC *GC-COPY-TICK* SETQ)
(SYSBUILD-ITEM STATIC *GC-NOTE-FREQUENCY* REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY-1 REF)
(SYSBUILD-ITEM STATIC GC-COPY-STRUCTURE DEF)
(SYSBUILD-ITEM STATIC COPY-EXTEND REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* REF)
(SYSBUILD-ITEM STATIC *GC-COPY-TICK* SETQ)
(SYSBUILD-ITEM STATIC *GC-NOTE-FREQUENCY* REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY-1 REF)
(SYSBUILD-ITEM STATIC GC-COPY-UNIT DEF)
(SYSBUILD-ITEM STATIC COPY-UNIT DEF)
(SYSBUILD-ITEM STATIC *GC-UNIT-COUNT* SETQ)
(SYSBUILD-ITEM STATIC SET-UNIT-FORWARDED DEF)
(SYSBUILD-ITEM STATIC INTERNAL-TO-UNIT? DEF)
(SYSBUILD-ITEM STATIC ACTUAL-CODE-SIZE DEF)
(SYSBUILD-ITEM STATIC MAKE-CODE REF)
(SYSBUILD-ITEM STATIC COPY-MEM REF)
(SYSBUILD-ITEM STATIC *UNIT-TEMPLATE* REF)
(SYSBUILD-ITEM STATIC MAKE-EXTEND-N REF)
(SYSBUILD-ITEM STATIC *GC-NOISILY?* LSET)
(SYSBUILD-ITEM STATIC *GC-NOTE-FREQUENCY* LSET)
(SYSBUILD-ITEM STATIC INTEGRABLE-ONLY REF)
(SYSBUILD-ITEM STATIC NOTE-GC-COPY DEF)
(SYSBUILD-ITEM STATIC NOTE-GC-REPEAT DEF)
(SYSBUILD-ITEM STATIC FLONUM-FORWARDED? DEF)
(SYSBUILD-ITEM STATIC FLONUM-HIGH-PESO REF)
(SYSBUILD-ITEM STATIC FLONUM-FORWARDED DEF)
(SYSBUILD-ITEM STATIC SET-FLONUM-FORWARDED DEF)
(SYSBUILD-ITEM STATIC PAIR-FORWARDED-CAR? DEF)
(SYSBUILD-ITEM STATIC PAIR-FORWARDED? DEF)
(SYSBUILD-ITEM STATIC SET-PAIR-FORWARDED DEF)
(SYSBUILD-ITEM STATIC GC-COPY-PAIR DEF)
(SYSBUILD-ITEM STATIC TEMPLATE-FORWARDED? DEF)
(SYSBUILD-ITEM STATIC TEMPLATE-CHUNK REF)
(SYSBUILD-ITEM STATIC TEMPLATE-FORWARDED DEF)
(SYSBUILD-ITEM STATIC SET-TEMPLATE-FORWARDED DEF)
(SYSBUILD-ITEM STATIC GC-COPY-EXTEND DEF)
(SYSBUILD-ITEM SYMBOL **FILENAME**)
(SYSBUILD-ITEM SYMBOL VULCAN)
(SYSBUILD-ITEM SYMBOL TSYS)
(SYSBUILD-ITEM SYMBOL GC)
(SYSBUILD-ITEM SYMBOL T)
(SYSBUILD-ITEM SYMBOL ENV)
(SYSBUILD-ITEM SYMBOL STRUCT)
(SYSBUILD-ITEM SYMBOL CHUNK)
(SYSBUILD-ITEM SYMBOL PRE-COOK)

